(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{308:function(t,s,e){"use strict";e.r(s);var a=e(14),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",[t._v(t._s(this.$page.title))]),t._v(" "),e("h2",{attrs:{id:"about-entity-component-systems"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#about-entity-component-systems"}},[t._v("#")]),t._v(" About Entity Component Systems")]),t._v(" "),e("p",[t._v("This is the first of a series of articles documenting what I know about the Unreal Mass framework.")]),t._v(" "),e("p",[t._v("Mass is an Unreal Engine module which implements an "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Entity_component_system",target:"_blank",rel:"noopener noreferrer"}},[t._v("Entity Component System"),e("OutboundLink")],1),t._v(" or ECS.")]),t._v(" "),e("p",[t._v("An entity component system is an architectural pattern where data related to objects, such as their velocity or position, is stored in a specific\nway in memory to speed up access to that data.  The way an entity component system stores data in memory is influenced by the memory caching architecture of the CPU it is running on.")]),t._v(" "),e("h2",{attrs:{id:"cpu-memory-caching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu-memory-caching"}},[t._v("#")]),t._v(" CPU Memory Caching")]),t._v(" "),e("p",[t._v("This is a very high-level view of caching.  When the CPU wants to operate on a value (say to increment it or to add it to another value) that value first must be copied from main memory to the CPU.")]),t._v(" "),e("p",[t._v("If there was no memory caching (like we are back in 1980), every time the CPU needed to access a value it would have to be copied\nfrom main memory. To avoid this CPUs have cache memory, which is a small amount of memory\nphysically either in the CPU or close by it.  When a value is required by the CPU,\nthe CPU checks to see if the value is already in the cache - if it is then\nit is copied from the cache to the CPU, if it is not it is copied from the\nmemory to the CPU and also stored in the cache so it might be found if it is\nrequired again.")]),t._v(" "),e("p",[t._v("This image shows the cache layout on a Ryzen 8 core CPU:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/Zen3_arch_20.jpg",alt:""}})]),t._v(" "),e("p",[t._v("From this we can see aspects of this specific memory architecture:")]),t._v(" "),e("ul",[e("li",[t._v("there are 3 levels of cache L1, L2, L3 (some chips have more)")]),t._v(" "),e("li",[t._v("the L1 cache consists of two separate parts the I Cache (instruction) and the D Cache (data).  When considering\nentity component s\nystems we only care about the data cache.")]),t._v(" "),e("li",[t._v("each level is larger than the previous one - L1 is 32K, L2 is 512K, L3 is 32M")]),t._v(" "),e("li",[t._v("each core has its own L1 and L2 cache")]),t._v(" "),e("li",[t._v("the L3 cache is shared between all cores")])]),t._v(" "),e("p",[t._v("When a value is required by the CPU:")]),t._v(" "),e("ul",[e("li",[t._v("if it is in the L1 cache it is copied from L1, otherwise")]),t._v(" "),e("li",[t._v("if it is in the L2 cache it is copied from L2, otherwise")]),t._v(" "),e("li",[t._v("if it is in the L3 cache it is copied from L3, otherwise")]),t._v(" "),e("li",[t._v("it is copied from memory")])]),t._v(" "),e("p",[t._v("Each successive level of cache is slower to access than the previous one - it has a higher latency.  To copy a value\n(ignoring the size of the value for now) to the CPU takes increasing time.  Note that the timings vary\nfrom system to system depending on CPU type and memory speed, but the general trend is the same.")]),t._v(" "),e("p",[t._v("This image shows values for a 12 core Ryzen CPU:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_002.PNG",alt:""}})]),t._v(" "),e("p",[t._v("Fetching data from:")]),t._v(" "),e("ul",[e("li",[t._v("L1 cache to CPU register - 4 cycles - 0.8ns")]),t._v(" "),e("li",[t._v("L2 cache to CPU register - 12 cycles - 2.4ns")]),t._v(" "),e("li",[t._v("L3 cache to CPU register - 52 cycles - 10.6ns")]),t._v(" "),e("li",[t._v("memory to CPU register - 52.7 ns")])]),t._v(" "),e("p",[t._v("So comparatively, fetching data from:")]),t._v(" "),e("ul",[e("li",[t._v("L2 cache takes 3 times as long as from L1")]),t._v(" "),e("li",[t._v("L3 cache takes 13 times as long as from L1")]),t._v(" "),e("li",[t._v("memory takes 66 times as long as from L1")])]),t._v(" "),e("p",[t._v("So in the extreme case a calculation could be done 66 times faster if all the required data was in the L1 cache\nas opposed to only being in memory.")]),t._v(" "),e("h2",{attrs:{id:"cache-lines"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-lines"}},[t._v("#")]),t._v(" Cache Lines")]),t._v(" "),e("p",[t._v("Values are not copied from main memory to cache memory one at a time.  They are\ncopied in cache lines.  The size of a cache line depends on the CPU model but is typically 64 bytes.  The CoreInfo\nprogram listed in references at the end of this page can be used to print the cache line size for your CPU.")]),t._v(" "),e("p",[t._v("Assunming a cache line size of 64 bytes, and an integer size of 4 bytes, one cache line can fit 16 integer\nvalues - this means that ideally we want to write a program so that each time we copy values from\nmain memory into the L1 cache we move 16 integer values at a time.  The first time we\nneed one of the values we pay the 52.7ns cost of copying a cache line from main memory to the\nL1 cache, but for the remaining 15 integer values we only pay the 0.8ns for each value.")]),t._v(" "),e("h2",{attrs:{id:"entity-component-systems"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entity-component-systems"}},[t._v("#")]),t._v(" Entity Component Systems")]),t._v(" "),e("p",[t._v("An entity component system tries to group data which will be used into contiguous arrays so\nthat every value used in a calculation is on a cache line with other values which will also\nbe used, and also that no data is copied from main memory to the CPU which is not used.")]),t._v(" "),e("h2",{attrs:{id:"a-simple-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-simple-example"}},[t._v("#")]),t._v(" A simple example")]),t._v(" "),e("p",[t._v("Say we have a Robot class and each instance of the Robot class robot has a position, a velocity,\na size and an active flag like this:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct FRobot\n{\n\tFVector Position;   // 3x8 = 24 bytes\n\tFVector Velocity;   // 3x8 = 24 bytes\n\tFVector Size;       // 3x8 = 24 bytes\n\tbool bActive;       // 1 byte\n};\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("We have a array of 1 million Robots, and we want to set the bActive property to true on every tick event.  This code will do that:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("namespace\n{\n\tstruct FRobot\n\t{\n\t\tFVector Position;   // 3x8 = 24 bytes\n\t\tFVector Velocity;   // 3x8 = 24 bytes\n\t\tFVector Size;       // 3x8 = 24 bytes\n\t\tbool bActive;\n\t};\n\n\tTArray<FRobot> RobotArray;\n\n\tvoid ActivateRobots()\n\t{\n\t\tTRACE_CPUPROFILER_EVENT_SCOPE(ActivateRobots)\n\t\t{\n\t\t\tfor (FRobot& Robot : RobotArray)\n\t\t\t{\n\t\t\t\tRobot.bActive = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n\tSuper::BeginPlay();\n\t// initialize array\n\tsize_t N = 1024 * 1024;\n\tRobotArray.AddDefaulted(N);\n}\n\nvoid AMyCharacter::Tick(float DeltaTime)\n{\n\tSuper::Tick(DeltaTime);\n\tActivateRobots();\n}\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br")])]),e("p",[t._v("Using Unreal Insights we can see the ActivateRobots call takes 7.38ms (2400ms for 325 calls):")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_004.PNG",alt:""}})]),t._v(" "),e("p",[t._v("If we restuctured the code to save each Robot property in a separate array, so we have one\narray for Ages, one for Positions etc. we have this:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("namespace {\n\n\tstruct FRobots\n\t{\n\t\tTArray<FVector> Positions;\n\t\tTArray<FVector> Velocities;\n\t\tTArray<FVector> Sizes;\n\t\tTArray<bool> Actives;\n\n\t\tvoid AddDefaulted(const size_t N)\n\t\t{\n\t\t\tPositions.AddDefaulted(N);\n\t\t\tVelocities.AddDefaulted(N);\n\t\t\tSizes.AddDefaulted(N);\n\t\t\tActives.AddDefaulted(N);\n\t\t}\n\t};\n\n\tFRobots Robots;\n\n\tvoid ActivateRobots_SOA()\n\t{\n\t\tTRACE_CPUPROFILER_EVENT_SCOPE(ActivateRobots_SOA)\n\t\t{\n\t\t\tfor( bool& bActive : Robots.Actives)\n\t\t\t{\n\t\t\t\tbActive = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid AMyCharacter::BeginPlay()\n{\n\tSuper::BeginPlay();\n\tsize_t N = 1024 * 1024;\n\tRobots.AddDefaulted(N);\n}\n\nvoid AMyCharacter::Tick(float DeltaTime)\n{\n\tSuper::Tick(DeltaTime);\n\tActivateRobots_SOA(Robots);\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br")])]),e("p",[t._v("Here the _SOA appended to the name to distinguish the two approaches\nrefers to Structure-of-Arrays.  This terminology comes from the fact that the first approach uses an Array-of-Structures, the\nsecond approach as a single structure which contains the data in arrays.")]),t._v(" "),e("p",[t._v("Using Unreal Insights we can see the ActivateRobots_SOA call takes 1.18ms (385ms for 325 calls):")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_006.PNG",alt:""}})]),t._v(" "),e("p",[t._v("So by changing to storing the data in arrays we have made the function  go 6 times faster.  This\nis what the Mass entity component system tries to do for objects in Unreal Engine, it\nenables support for much larger numbers of objects than would be support by a strictly\nobject oriented approach.")]),t._v(" "),e("h2",{attrs:{id:"data-types-and-sizes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-types-and-sizes"}},[t._v("#")]),t._v(" Data Types and Sizes")]),t._v(" "),e("p",[t._v("Storing data in arrays not only increases performance but it also saves memory:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct FRobot\n{\n\tFVector Position;   // 3x8 = 24 bytes\n\tFVector Velocity;   // 3x8 = 24 bytes\n\tFVector Size;       // 3x8 = 24 bytes\n\tbool bActive;\n};\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("When an array is filled with FRobot objects they align according to c++ alignment rules.  The alignment\nof a struct is usually the maximum alignment of each of its members, so in this case  the alignment\nalignof(FRobot) is alignof(FVector) which is 24 bytes - so we waste 23 bytes for each\nFRobot object.")]),t._v(" "),e("p",[t._v("Changing the bool to an int32 type has an observable effect:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_007.PNG",alt:""}})]),t._v(" "),e("p",[t._v("The ActivateRobots call changes takes 7.41ms (2500ms for 337 calls), an insigificant change from 7.38.")]),t._v(" "),e("p",[t._v("The ActivateRobots_SOA call changes takes 0.87ms (295ms for 337 calls), an 26% improvement from 1.18ms.  This\nis probably due to the int32 property having better alignment than the single byte bool property.")]),t._v(" "),e("h2",{attrs:{id:"terminology"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#terminology"}},[t._v("#")]),t._v(" Terminology")]),t._v(" "),e("p",[t._v('"cache locality" refers to the position of one thing with regard to another.  If an algorithm\nuses two variables it is good if they are near each other in memory so when the first\none is copied from main memory to a cache line, the second one will also be in\nthe samea cache line and will be copied as well.  So when it is needed by the CPU\nit will already be in the cache.')]),t._v(" "),e("h2",{attrs:{id:"threading-and-false-sharing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threading-and-false-sharing"}},[t._v("#")]),t._v(" Threading and False Sharing")]),t._v(" "),e("p",[t._v("Cache lines need to be considered when using threading to speed up tasks.")]),t._v(" "),e("p",[t._v("We can create a background task which counts the  number of active robots like so:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class FCountActiveRobotsTask : public FNonAbandonableTask\n{\npublic:\n\tFCountActiveRobotsTask(const int32 InStart, const int32 InNum, int32& InCount )\n\t\t: Start(InStart), Num(InNum), Count(InCount)\n\t{\n\t}\n\n\tvoid DoWork()\n\t{\n\t\tfor (int i = Start; i < Start + Num; ++i)\n\t\t{\n\t\t\tif (Robots.Actives[i])\n\t\t\t{\n\t\t\t\tCount++;\n\t\t\t}\n\t\t}\n\t}\n\n\tTStatId GetStatId() const { return TStatId(); }\n\nprivate:\n\tint32 Start;\n\tint32 Num;\n\tint32& Count;\n};\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br")])]),e("p",[t._v("We launch this background task for one thread only like this:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void Count_Robots_Background_Thread()\n{\n\tint32 Count = 0;\n\tTRACE_CPUPROFILER_EVENT_SCOPE(Count_Robots_Background_Thread)\n\t{\n\t\tauto Task = \n\t\t  MakeUnique<FAsyncTask<FCountActiveRobotsTask>>( 0, Robots.Actives.Num(), Count );\n\t\tif (Task)\n\t\t{\n\t\t\tTask->StartBackgroundTask();\n\t\t\tTask->EnsureCompletion(true, true);\n\t\t}\n\t}\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("p",[t._v("Comparing running on the main thread with doing the same task on a single background thread we see these\ntimings:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_008.PNG",alt:""}})]),t._v(" "),e("p",[t._v("Running on the background thread is very slightly slower because of the overhead if starting and managing the thread.")]),t._v(" "),e("p",[t._v("We can change from running on one background thread to four like this:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void Count_Robots_Background_Threads()\n{\n\tint32 Count = 0;\n\tTRACE_CPUPROFILER_EVENT_SCOPE(Count_Robots_Background_Threads)\n\t{\n\t\tconstexpr int NumTasks = 4;\n\t\tstd::array<int32, NumTasks> Counts;\n\t\tstd::fill(Counts.begin(), Counts.end(), 0);\n\t\tstd::array< TUniquePtr< FAsyncTask<FCountActiveRobotsTask> >, NumTasks > Tasks;\n\n\t\tint32 StepSize = Robots.Actives.Num() / NumTasks;\n\n\t\t// create\n\t\tfor (int i = 0; i < NumTasks; ++i)\n\t\t{\n\t\t\tTasks[i] = \n\t\t\t  MakeUnique<FAsyncTask<FCountActiveRobotsTask>>(StepSize * i, StepSize, Counts[i]);\n\t\t}\n\t\t// launch\n\t\tfor (int i = 0; i < NumTasks; ++i)\n\t\t{\n\t\t\tTasks[i]->StartBackgroundTask();\n\t\t}\n\t\t// wait\n\t\tfor (int i = 0; i < NumTasks; ++i)\n\t\t{\n\t\t\tTasks[i]->EnsureCompletion(true, true);\n\t\t}\n\n\t\tCount = std::accumulate(Counts.begin(), Counts.end(), 0);\n\t}\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br")])]),e("p",[t._v("In this code we:")]),t._v(" "),e("ul",[e("li",[t._v("allocate 4 bacground task objects which will run on background threads")]),t._v(" "),e("li",[t._v("divide the array of robots into 4 sections and pass each task the start and length of their section")]),t._v(" "),e("li",[t._v("allocate an array of 4 int32 objects, each task accumulates their count into one element of this array")]),t._v(" "),e("li",[t._v("after all the threads are finished we accumulate the 4 count objects into one value")])]),t._v(" "),e("p",[t._v("Now we get these timings:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_009.PNG",alt:""}})]),t._v(" "),e("p",[t._v("Running on four background threads takes 4 times longer than running on one.  What is happening\nhere is an issue of cache coherency and false sharing.")]),t._v(" "),e("p",[t._v("Here is the diagram of the cache layout on a Ryzen 8 core CPU again:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/Zen3_arch_20.jpg",alt:""}})]),t._v(" "),e("p",[t._v("We see that each core has its own L1 and L2 cache.  When a value is in main memory\neach CPU core that refers to that value has its own copy of that value in its L1 cache.  Cache\ncoherency is the mechanism by which changes to these cached values are synchronized - typically\nby using a protocol like "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/MESI_protocol",target:"_blank",rel:"noopener noreferrer"}},[t._v("MISE"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("When one core changes a value in its cache, that value becomes invalid in every other core's cache which holds that value, and\nthe next time one of those other cores accesses that value it is copied from the cache of the core\nwhich changed it.  This mechanism make sure all the cores only ever see the same\nvalue, which make programming much easier, but it does mean that operations on the second core are stalled while value is\nretrieved from the core which changed it.")]),t._v(" "),e("p",[t._v("The MISE protocol which synchronizes values between cores does not work by copying individual\nvalues between core - it copies whole cache lines at a time.")]),t._v(" "),e("p",[t._v('Why we see a problem here, causing the mutithreaded implementation to be so much slower, is not that\nwe are updating the same value, but that the each thread is updating a value\nin the Counts array and all those values are on the same cache line.  This problem\nis referred to as "false sharing" because  while the threads are not actually sharing\ncount values, synchronizing the core caches using whole cache lines makes it appear as if they were.')]),t._v(" "),e("p",[t._v("This problem can be fixed in a number of ways:")]),t._v(" "),e("ul",[e("li",[t._v("we could give each task its own Count value to accumulate to accumulate into and only\nupdate the Count array once at the end")]),t._v(" "),e("li",[t._v("we could make the Count array 16 times as large and have each thread\nuse every 16th value - this would ensure that the used values are more 64 bytes apart\nso thet are not on the cache line")]),t._v(" "),e("li",[t._v("we could accumulate the values into property in a structure which was padded to be\n64 bytes long, so that the values are not on the same cache line, like:")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct PaddedValue\n{\n\tint32 Value = 0;\n\tchar Padding[ 64-sizeof(int32)];\n};\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("ul",[e("li",[t._v("we could accumulate the values into property in a structure which was aligned\nto 64 bytes long, so that the values are not on the same cache line, like:")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct alignas(64) AlignedValue\n{\n\tint32 Value = 0;\n};\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("The code to accumulate into a local variable looks like this:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class FCountActiveRobotsTaskLocalCount : public FNonAbandonableTask\n{\npublic:\n\tFCountActiveRobotsTaskLocalCount(const int32 InStart, const int32 InNum, int32& InCount)\n\t\t: Start(InStart), Num(InNum), Count(InCount)\n\t{\n\t}\n\n\tvoid DoWork()\n\t{\n\t\tint32 LocalCount = 0;\n\t\tfor (int i = Start; i < Start + Num; ++i)\n\t\t{\n\t\t\tif (Robots.Actives[i])\n\t\t\t{\n\t\t\t\tLocalCount++;\n\t\t\t}\n\t\t}\n\t\tCount = LocalCount;\n\t}\n\n\tTStatId GetStatId() const { return TStatId(); }\nprivate:\n\tint32 Start;\n\tint32 Num;\n\tint32& Count;\n};\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br")])]),e("p",[t._v("and the code to pad the Counts array and only use every 16th element looks like this:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void Count_Robots_Background_Threads_Padding()\n{\n\tint32 Count = 0;\n\tTRACE_CPUPROFILER_EVENT_SCOPE(Count_Robots_Background_Threads_Padding)\n\t{\n\t\tconstexpr int NumTasks = 4;\n\t\tstd::array<int32, NumTasks * 16 > Counts;\n\t\tstd::fill(Counts.begin(), Counts.end(), 0);\n\t\tstd::array< TUniquePtr< FAsyncTask<FCountActiveRobotsTask> >, NumTasks > Tasks;\n\n\t\tint32 StepSize = Robots.Actives.Num() / NumTasks;\n\n\t\t// create\n\t\tfor (int i = 0; i < NumTasks; ++i)\n\t\t{\n\t\t\tTasks[i] =\n\t\t\t MakeUnique<FAsyncTask<FCountActiveRobotsTask>>(StepSize*i, StepSize, Counts[i*16]);\n\t\t}\n\t\t// launch\n\t\tfor (int i = 0; i < NumTasks; ++i)\n\t\t{\n\t\t\tTasks[i]->StartBackgroundTask();\n\t\t}\n\t\t// wait\n\t\tfor (int i = 0; i < NumTasks; ++i)\n\t\t{\n\t\t\tTasks[i]->EnsureCompletion(true, true);\n\t\t}\n\t\tCount = std::accumulate(Counts.begin(), Counts.end(), 0);\n\t}\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br")])]),e("p",[t._v("This picture shows the results:")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/mass_001_010.PNG",alt:""}})]),t._v(" "),e("p",[t._v("We can see that either using local variables or using padding eliminates the false sharing\nand reduces the time from 1,300ms to 140ms.")]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://learn.microsoft.com/en-us/sysinternals/downloads/coreinfo",target:"_blank",rel:"noopener noreferrer"}},[t._v("CoreInfo"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);