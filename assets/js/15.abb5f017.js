(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{295:function(e,t,n){"use strict";n.r(t);var r=n(14),i=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"prereqs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prereqs"}},[e._v("#")]),e._v(" Prereqs")]),e._v(" "),n("p",[e._v("Already had:\ncmake\ngit\nvisual studio")]),e._v(" "),n("h2",{attrs:{id:"vcpkg"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vcpkg"}},[e._v("#")]),e._v(" vcpkg")]),e._v(" "),n("p",[e._v("mkdir d:\\tools\ncd d:\\tools\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n.\\bootstrap-vcpkg.bat\nset VCPKG_ROOT=%cd%")]),e._v(" "),n("h2",{attrs:{id:"openssl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openssl"}},[e._v("#")]),e._v(" openssl")]),e._v(" "),n("p",[e._v("set VCPKG_ROOT=d:\\tools\\vcpkg\ncd %VCPKG_ROOT%\nvcpkg install openssl --triplet x64-windows\nvcpkg integrate install")]),e._v(" "),n("p",[e._v("// CMake will be able to find openssl given the following option is provided:\n// -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\\scripts\\buildsystems\\vcpkg.cmake")]),e._v(" "),n("h2",{attrs:{id:"srt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#srt"}},[e._v("#")]),e._v(" SRT")]),e._v(" "),n("p",[e._v("cd d:\\tools\ngit clone https://github.com/haivision/srt.git\ncd srt\nset SRT_ROOT=%cd%")]),e._v(" "),n("h3",{attrs:{id:"generate-srt-build-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate-srt-build-files"}},[e._v("#")]),e._v(" generate SRT build files")]),e._v(" "),n("p",[e._v('cd %SRT_ROOT%\nmkdir build\ncd build\ncmake ..\\ -G"Visual Studio 16 2019" -A x64 -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\\scripts\\buildsystems\\vcpkg.cmake')]),e._v(" "),n("h3",{attrs:{id:"build-srt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-srt"}},[e._v("#")]),e._v(" build srt")]),e._v(" "),n("h1",{attrs:{id:"add-config-release-for-release-build-else-will-be-debug"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-config-release-for-release-build-else-will-be-debug"}},[e._v("#")]),e._v(' add "--config Release" for release build else will be debug')]),e._v(" "),n("p",[e._v("cmake --build . --config Release")]),e._v(" "),n("h2",{attrs:{id:"smoke-test"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#smoke-test"}},[e._v("#")]),e._v(" smoke test")]),e._v(" "),n("p",[e._v("from https://github.com/Haivision/srt/blob/master/docs/apps/srt-live-transmit.md")]),e._v(" "),n("p",[e._v('IN RECV WINDOW\nbuild\\debug\\srt-live-transmit udp://:1234 srt://:4201 -v\nIN TRANS WINDOW\nffmpeg -f lavfi -re -i smptebars=duration=300:size=1280x720:rate=30 -f lavfi -re -i sine=frequency=1000:duration=60:sample_rate=44100 -pix_fmt yuv420p -c:v libx264 -b:v 1000k -g 30 -keyint_min 120 -profile:v baseline -preset veryfast -f mpegts "udp://127.0.0.1:1234?pkt_size=1316"')]),e._v(" "),n("h2",{attrs:{id:"testing-using-vlc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testing-using-vlc"}},[e._v("#")]),e._v(" testing using VLC")]),e._v(" "),n("p",[e._v('from https://get.videolan.org/vlc/3.0.18/win64/vlc-3.0.18-win64.exe\nrun VLC\nuse Media|OpenNetworkStream "srt://127.0.0.1:4201"\n-- do this while the above smoke test is running, get colors in VLC screen')]),e._v(" "),n("p",[e._v("ffmpeg -> srt-live-transmit -> VLC")]),e._v(" "),n("h1",{attrs:{id:"testing-owl-to-srt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testing-owl-to-srt"}},[e._v("#")]),e._v(" Testing OWL to SRT")]),e._v(" "),n("p",[e._v("Extract https://offworld-plugins.s3.amazonaws.com/owl-livestreaming-toolkit.v0.156.0-ue_5.1.zip to d:\\tools")]),e._v(" "),n("p",[e._v("Setup license by running D:\\tools\\OWLLivestreamingToolkit\\Utils\\owl-licensing-utility.exe\npaste in the key NBO71hUqbbaKSD2JDWOpjUszXzhQhNT91IAfB6ROUo3QCbWHGINbjCOJf9yk5m6Fzl2FC7CFLzft2fhsjzzycMJQKl")]),e._v(" "),n("p",[e._v("Setup a project with a CineCam:\nGames, Third Person, Blueprint\nd:\\work\\intan\\ThirdP")]),e._v(" "),n("blockquote",[n("p",[e._v("install plugin\nmkdir d:\\work\\intan\\ThirdP\\Plugins\nrobocopy d:\\tools\\OWLLivestreamingToolkit d:\\work\\intan\\ThirdP\\Plugins\\OWLLivestreamingToolkit /E\nopen the project, the Off World plugin should be enabled already")])]),e._v(" "),n("blockquote",[n("p",[e._v("try OWLCapture component")])]),e._v(" "),n("p",[e._v('open Content/ThirdPerson/Blueprints/BP_ThirdPersonCharacter\nadd OWLCapture component called "OWLCapture"\ndrag to under the FollowCamera component\nin details panel of OWLCapture click dropdown for Texture Target property\ncreate new Render Target called "RT_TextureRenderTarget2D" in Content/ThirdPerson/Blueprints\nRun the game, this has made the main window rendering very jerky, reduced frame rate from 100 to 41')]),e._v(" "),n("blockquote",[n("p",[e._v("try OWLViewport Capture actor")])]),e._v(" "),n("p",[e._v("In the Place Actors tab find the OWL section, drop a OWLViewport Capture object into the map\nSelect the OWLViewportCapture actor and set the Texture Target to the RT_TextureRenderTarget2D\nOpen the RT_TextureRenderTarget2D in another window\nRun the game, updates the RT_TextureRenderTarget2D render target still does 100 fps")]),e._v(" "),n("blockquote",[n("p",[e._v("try OWLMediaOutput")])]),e._v(" "),n("p",[e._v("Add an OWLMediaOutput actor to the world map\nset properties:\nOutput Type = Stream to SRT\nSRT Settings - Stream URL = srt://127.0.0.1:4201    (which is what VLC is listening on)\nInput Render Target = RT_TextureRenderTarget2D")]),e._v(" "),n("ul",[n("li",[e._v("docs says it integrates ffmpeg into Unreal - might be only save to disk part")])]),e._v(" "),n("p",[e._v("logs this\nLogOWLMedia: Error: Failed to find valid API key or licence for the metered output. Output will have a watermark\nLogOWLImageInput: Warning: Cropping input texture to even resolution. New output resolution: 1808x860px\nLogOWLMedia: Display: Starting recording to: srt://127.0.0.1:4201\nLogOWLMedia: Error: [ffmpeg]: Connection to srt://127.0.0.1:4201?transtype=live failed: I/O error\nLogOWLMedia: Error: Failed open file handle: srt://127.0.0.1:4201?transtype=live\nLogOWLMedia: Error: Failed to start new FFmpeg Output")]),e._v(" "),n("p",[e._v("Logs to file ok when start button is pressed in editor when game is not running?")]),e._v(" "),n("blockquote",[n("p",[e._v("try srt toolkit listening")])]),e._v(" "),n("p",[e._v("cd d:\\tools\\srt\n-- listen on 4201 and forward to non-existant 4202\nbuild\\debug\\srt-live-transmit srt://:4201 srt://:4202 -v\n-- pressing start on the OWLMediaOutput object, this is received")]),e._v(" "),n("blockquote",[n("p",[e._v("add VLC listening to the forwarded data on srt://:4202")])]),e._v(" "),n("ul",[n("li",[e._v("this works")])]),e._v(" "),n("blockquote",[n("p",[e._v("try OWLMediaOutput directly to VLC")])]),e._v(" "),n("p",[e._v("LogOWLMedia: Error: [ffmpeg]: Connection to srt://127.0.0.1:4201?transtype=live failed: I/O error")]),e._v(" "),n("p",[e._v("SO streaming srt to srt-live-transmit works, to VLC fails")]),e._v(" "),n("p",[e._v("tried:\nVLC      srt://127.0.0.1:4201?transtype=live\nUnreal   srt://127.0.0.1:4201?mode=caller\nsrt://127.0.0.1:4201?mode=caller&transtype=live")]),e._v(" "),n("p",[e._v("reading https://obsproject.com/kb/srt-protocol-streaming-guide tried\nVLC      srt://127.0.0.1:4201\nUnreal   srt://127.0.0.1:4201?mode=caller")]),e._v(" "),n("p",[e._v("-- tryy OBS??")]),e._v(" "),n("blockquote",[n("p",[e._v("streaming to OBS is documented")])]),e._v(" "),n("p",[e._v("If you want to live-stream on the same machine then use the SRT address: srt://127.0.0.1:4700?mode=caller")]),e._v(" "),n("p",[e._v("If you want to live-stream over the network then use the SRT address: srt://192.168.xxx.xxx:4700?mode=caller and replace the xxx with your IP address")]),e._v(" "),n("p",[e._v("In OBS Studio add a media source:\nInput: srt://127.0.0.1:4202?mode=listener\nInput format: mpegts")]),e._v(" "),n("p",[e._v("OBS WORKS - they both listen to 4202 at the same time\nstill no luck with VLC")]),e._v(" "),n("p",[e._v("https://knowledge.offworld.live/en/unreal-engine-live-streaming-toolkit/how-to-live-stream-srt-from-unreal-engine-to-obs-studio")]),e._v(" "),n("p",[e._v("Moved Plugin\\OWLLivestreamingToolkit to engine C:\\Program Files\\Epic Games\\UE_5.1\\Engine\\Plugins\\Marketplace")]),e._v(" "),n("p",[e._v("FFPMG SRT errors:\nalso using libsrt ?? could we use that ??\ndo we need to convert the texture to a video stream format??\nhttps://github.com/Haivision/srt/issues/1404")]),e._v(" "),n("blockquote",[n("p",[e._v("try ffmpeg direct to VLC")])]),e._v(" "),n("p",[e._v('ffmpeg -f lavfi -re -i smptebars=duration=300:size=1280x720:rate=30 -f lavfi -re -i sine=frequency=1000:duration=60:sample_rate=44100 -pix_fmt yuv420p -c:v libx264 -b:v 1000k -g 30 -keyint_min 120 -profile:v baseline -preset veryfast -f mpegts "srt://127.0.0.1:4202?pkt_size=1316"')]),e._v(" "),n("p",[e._v("-- same error as unreal:\n[srt @ 0000022f9da88200] Connection to srt://127.0.0.1:4202?pkt_size=1316 failed: I/O error\nsrt://127.0.0.1:4202?pkt_size=1316: I/O error")]),e._v(" "),n("p",[e._v("VLC try:\nsrt://127.0.0.1:4202?mode=listener\nsrt://127.0.0.1:4202              <-- works with data from haivision srt\nsrt://127.0.0.1:4202?mode=caller")]),e._v(" "),n("p",[e._v("FFmpeg srt cookbook:\nhttps://srtlab.github.io/srt-cookbook/apps/ffmpeg.html")]),e._v(" "),n("p",[e._v("Does ffmpeg use the srt codebase ?")]),e._v(" "),n("p",[e._v("Search VLC issues?\nhttps://code.videolan.org/videolan/vlc/-/issues")]),e._v(" "),n("p",[e._v("VLC repo is ahead of public download v 3 / v 4")]),e._v(" "),n("p",[e._v("Configuring VLC for SRT\nhttps://github.com/SRTLab/srt-cookbook/blob/master/docs/apps/vlc-media-player.md")]),e._v(" "),n("p",[e._v("Wireshark SRT\nhttps://github.com/SRTLab/srt-cookbook/blob/master/docs/how-to-articles/using-tshark-wireshark-to-analyse-srt-traffic.md")]),e._v(" "),n("p",[e._v('ffmpeg direct works with\nVLC:      srt://:4202\nfails: srt://127.0.0.1:4202\nffmpeg:  ffmpeg -f lavfi -re -i smptebars=duration=300:size=1280x720:rate=30 -f lavfi -re -i sine=frequency=1000:duration=60:sample_rate=44100 -pix_fmt yuv420p -c:v libx264 -b:v 1000k -g 30 -keyint_min 120 -profile:v baseline -preset veryfast -f mpegts "srt://:4202?mode=listener"')]),e._v(" "),n("p",[e._v("Fails with 127.0.0.1 on either end, works with srt://:4202")]),e._v(" "),n("ul",[n("li",[e._v("ffmpeg end needs mode=listener")])]),e._v(" "),n("blockquote",[n("p",[e._v("try Unreal with srt://:4202?mode=listener\nFails to connect to srt://:4202?transtype=live so it eats the mode option, but this works!\nsrt://:4202?mode=listener?transtype=live")])]),e._v(" "),n("p",[e._v("huge ~3 second latency")]),e._v(" "),n("ul",[n("li",[e._v("packaging ?")])]),e._v(" "),n("p",[e._v("Has the watermark problem:\ntry moving OWL plugin to Engine")]),e._v(" "),n("p",[e._v('robocopy d:\\tools\\OWLLivestreamingToolkit "C:\\Program Files\\Epic Games\\UE_5.1\\Engine\\Plugins\\Marketplace\\OWLLivestreamingToolkit" /E\nrd /s /q d:\\work\\intan\\ThirdP\\Plugins\\OWLLivestreamingToolkit\nDo the offline license thing for node-locked license\n= needs whatever account got the license to log into the offworld page')]),e._v(" "),n("h2",{attrs:{id:"building-ffmpeg"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#building-ffmpeg"}},[e._v("#")]),e._v(" Building ffmpeg")]),e._v(" "),n("p",[e._v("Following http://ffmpeg.org/platform.html for MSVC build")]),e._v(" "),n("p",[e._v("Install msys2 from https://www.msys2.org/ to d:\\tools\\msys64")]),e._v(" "),n("p",[e._v("Install nasm from https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/ to d:\\tools\\nasm")]),e._v(" "),n("p",[e._v("Build based on this:\nhttps://www.roxlu.com/2019/062/compiling-ffmpeg-with-x264-on-windows-10-using-msvc")]),e._v(" "),n("p",[e._v("code d:\\tools\\msys64\\msys2_shell.cmd\nchange")]),e._v(" "),n("blockquote",[n("p",[e._v("rem set MSYS2_PATH_TYPE=inherit\nto\nset MSYS2_PATH_TYPE=inherit")])]),e._v(" "),n("p",[e._v("execute d:\\tools\\msys64\\msys2_shell.cmd, this opens a shell window\nrun these commands one at a time:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pacman -Syu\npacman -S make\npacman -S diffutils\npacman -S yasm\npacman -S nasm\nmv /usr/bin/link.exe /usr/bin/link.exe.bak\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("Might need to close the window and reopen it by re-running d:\\tools\\msys64\\msys2_shell.cmd  -msys -use-full-path")]),e._v(" "),n("p",[e._v("Execute these commands:\npacman -S git\nmkdir tmp\ncd tmp\nmkdir sources\nmkdir build\ncd sources\ngit clone --depth 1 https://code.videolan.org/videolan/x264.git\ngit clone --depth 1 git://source.ffmpeg.org/ffmpeg.git")]),e._v(" "),n("h4",{attrs:{id:"fix-build-scripts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fix-build-scripts"}},[e._v("#")]),e._v(" fix build scripts")]),e._v(" "),n("p",[e._v('cd ~/tmp/sources/x264\ncurl "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD" > config.guess')]),e._v(" "),n("h4",{attrs:{id:"build-x264-not"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-x264-not"}},[e._v("#")]),e._v(" build  x264 [not]")]),e._v(" "),n("p",[e._v("cd ~/tmp/build\nmkdir x264\ncd x264")]),e._v(" "),n("p",[e._v("CC=cl ./../../sources/x264/configure --prefix=./../../installed --enable-shared\nmake -j 8\nmake install\nmv ./../../installed/lib/libx264.dll.lib ./../../installed/lib/libx264.lib")]),e._v(" "),n("h4",{attrs:{id:"build-ffmpeg"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-ffmpeg"}},[e._v("#")]),e._v(" build ffmpeg")]),e._v(" "),n("p",[e._v("mkdir ~/tmp/build/ffmpeg\ncd ~/tmp/build/ffmpeg\nexport CC=cl")]),e._v(" "),n("p",[e._v("../../sources/ffmpeg/configure "),n("br"),e._v("\n--prefix=./../../installed "),n("br"),e._v("\n--toolchain=msvc "),n("br"),e._v("\n--arch=x86_64 "),n("br"),e._v("\n--enable-x86asm  "),n("br"),e._v("\n--enable-asm "),n("br"),e._v("\n--enable-shared "),n("br"),e._v("\n--disable-static "),n("br"),e._v('\n--extra-ldflags="-LIBPATH:./../../installed/lib/" '),n("br"),e._v('\n--extra-cflags="-I./../../installed/include/"')]),e._v(" "),n("p",[e._v("adding one at a time:")]),e._v(" "),n("p",[e._v("../../sources/ffmpeg/configure "),n("br"),e._v("\n--prefix=./../../installed "),n("br"),e._v("\n--toolchain=msvc "),n("br"),e._v("\n--arch=x86_64 "),n("br"),e._v("\n--enable-x86asm  "),n("br"),e._v("\n--enable-asm "),n("br"),e._v("\n--enable-shared "),n("br"),e._v("\n--disable-static "),n("br"),e._v('\n--extra-ldflags="-LIBPATH:./../../installed/lib/" '),n("br"),e._v('\n--extra-cflags="-I./../../installed/include/"'),n("br"),e._v("\n--enable-libsrt")]),e._v(" "),n("p",[e._v("config matching the download version:")]),e._v(" "),n("p",[e._v("../../sources/ffmpeg/configure "),n("br"),e._v("\n--prefix=./../../installed "),n("br"),e._v("\n--toolchain=msvc "),n("br"),e._v("\n--arch=x86_64 "),n("br"),e._v("\n--enable-x86asm  "),n("br"),e._v("\n--enable-asm "),n("br"),e._v("\n--enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-libxml2  --enable-lzma --enable-zlib --enable-libsrt --enable-libssh --enable-libzmq  --enable-sdl2 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-libaom --enable-libopenjpeg --enable-libvpx --enable-libass --enable-libfreetype --enable-libfribidi --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libmfx --enable-libgme --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libtheora --enable-libvo-amrwbenc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-librubberband "),n("br"),e._v('\n--extra-ldflags="-LIBPATH:./../../installed/lib/" '),n("br"),e._v('\n--extra-cflags="-I./../../installed/include/"')]),e._v(" "),n("p",[e._v("these are built download options:\n--enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-lzma --enable-zlib --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-sdl2 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-libaom --enable-libopenjpeg --enable-libvpx --enable-libass --enable-libfreetype --enable-libfribidi --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libmfx --enable-libgme --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libtheora --enable-libvo-amrwbenc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-librubberband")]),e._v(" "),n("p",[e._v("-- cant build with these:\n--enable-avisynth\n--enable-gmp\n--enable-gnutls")]),e._v(" "),n("p",[e._v("make -j 10 install")]),e._v(" "),n("h1",{attrs:{id:"owloutput-is-buggy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#owloutput-is-buggy"}},[e._v("#")]),e._v(" OWLOutput is buggy")]),e._v(" "),n("p",[e._v("press Start, Unreal hangs if VLC is not running, waits on the game thread")]),e._v(" "),n("h1",{attrs:{id:"linking-srt-into-unreal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linking-srt-into-unreal"}},[e._v("#")]),e._v(" Linking srt into Unreal")]),e._v(" "),n("p",[e._v("d:\\work\\intan\\ThirdP2 - no OWL plugin for srt, with OWL plugin for capture camera->texture")]),e._v(" "),n("p",[e._v("Discord: stage 1 will be just getting a standard SRT output running without the use of OWL plugin")]),e._v(" "),n("p",[e._v("Will there be problems with having two srt implementations linked if we use Owl as well?")]),e._v(" "),n("p",[e._v("Make a plugin as per\nhttps://docs.unrealengine.com/4.26/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/ThirdPartyLibraries/")]),e._v(" "),n("p",[e._v("rd /s /q d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\nrd /s /q d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\include")]),e._v(" "),n("p",[e._v("mkdir d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\nmkdir d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\debug\nmkdir d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\release\nmkdir d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\include\nmkdir d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\include\\win")]),e._v(" "),n("p",[e._v("copy d:\\tools\\srt\\build\\debug\\srt.dll  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\debug\ncopy d:\\tools\\srt\\build\\debug\\srt.lib  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\debug\ncopy d:\\tools\\srt\\build\\debug\\libcrypto-3-x64.dll  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\debug\ncopy d:\\tools\\srt\\build\\release\\srt.dll  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\release\ncopy d:\\tools\\srt\\build\\release\\srt.lib  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\release\ncopy d:\\tools\\srt\\build\\release\\libcrypto-3-x64.dll  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\x64\\release\ncopy d:\\tools\\srt\\srtcore*.h  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\include\ncopy d:\\tools\\srt\\build*.h  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\include\ncopy d:\\tools\\srt\\common\\win*.h  d:\\work\\intan\\ThirdP2\\Plugins\\SRT\\Source\\ThirdParty\\SRTLibrary\\include\\win")]),e._v(" "),n("h1",{attrs:{id:"video-intro-to-srt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#video-intro-to-srt"}},[e._v("#")]),e._v(" Video intro to SRT")]),e._v(" "),n("p",[e._v("https://www.youtube.com/watch?v=VrE3dJej5IE")])])}),[],!1,null,null,null);t.default=i.exports}}]);