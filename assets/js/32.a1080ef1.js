(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{314:function(e,a,t){"use strict";t.r(a);var n=t(14),i=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",[e._v(e._s(this.$page.title))]),e._v(" "),t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),t("p",[e._v("Unreal Engine supports plugins, which contain code and game content. They can also\nwrap a third party library (a .dll file) and allow the functionality of\nthat library to be called  directly from C++\nand indirectly using Blueprint objects which are part of the plugin.")]),e._v(" "),t("p",[e._v("In a previous article "),t("RouterLink",{attrs:{to:"/content/BuildingFFMPEG.html"}},[e._v("here")]),e._v(" we compiled the open source ffmpeg\nlibrary.  Now we will create a plugin which wraps the ffmpeg library in a form\nwhere it can be used in other Unreal Engine projects.")],1),e._v(" "),t("p",[e._v("The point of this article is not to create an ffmpeg plugin, but to understand\nwhat is involved in making a third party plugin and\nexplain how to deal with some of the problems which might arise.")]),e._v(" "),t("h2",{attrs:{id:"understanding-import-libraries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#understanding-import-libraries"}},[e._v("#")]),e._v(" Understanding Import Libraries")]),e._v(" "),t("p",[e._v('When a DLL is compiled from C or C++ source code two files are created, one with the extension ".dll" and\none with the extension ".lib".  The one with the .lib extension is the import library.')]),e._v(" "),t("p",[e._v("Typically a DLL contains a large number of symbols for all the functions and variables used in the code.  Only some\nof these symbols are intended to be used by programs which load the DLL. These symbols\nare "),t("em",[e._v("exported")]),e._v(" from the DLL either by making them with  "),t("code",[e._v("__declspec(dllexport)")]),e._v(" in the source\ncode or naming them in a separate .DEF file which is used as part of the compilation process.")]),e._v(" "),t("p",[e._v("The import library contains information about all of the exported symbols\nfrom the DLL and is used in two ways:")]),e._v(" "),t("ul",[t("li",[e._v("by the linker when a program is compiled and linked to resolve symbols imported from the DLL")]),e._v(" "),t("li",[e._v("at runtime to tell the linker which DLL supplies the exported symbol")])]),e._v(" "),t("p",[e._v("The .dll and .lib files are a pair and are distributed together in a plugin.")]),e._v(" "),t("h4",{attrs:{id:"minor-details"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-details"}},[e._v("#")]),e._v(" Minor Details")]),e._v(" "),t("p",[e._v("Windows static libraries also have a .lib extension.  When using a DLL, symbols are resolved\nwhen the program is loaded.  When using a static library, symbols are resolved at compile time - the\nneeded parts of the static library are included in the executable file.  This has consequences including\nlarger executable files and not being able to share code which resides in a DLL.")]),e._v(" "),t("p",[e._v("Linux does not use import libraries.  By default it exports all symbols in a .dll (usually a shared object .so file).  This\nis a simpler approach but introduces its own complexities as thousands more symbols must be resolved at link time, and\nsometimes they resolve in undesirable ways.")]),e._v(" "),t("h2",{attrs:{id:"plugin-directory-structures"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin-directory-structures"}},[e._v("#")]),e._v(" Plugin Directory Structures")]),e._v(" "),t("p",[e._v("Epic has this to say about directory structures:")]),e._v(" "),t("blockquote",[t("p",[e._v('"The Unreal Engine (UE) source code includes several third-party libraries, which are stored under UnrealEngine/Engine/Source/ThirdParty/.. This is a convention for engine modules, and not required. When developing plugins that use third-party libraries, it is more convenient to include the third-party software within the plugin directory.')])]),e._v(" "),t("p",[e._v("If you create a plugin from the UI, using Edit | Plugins | +Add | Third Party Library you end up with a plugin directory\nstructure which looks like this (for clarity I have removed the non-Windows directories):")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/plugin_001.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"plugin-build-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin-build-files"}},[e._v("#")]),e._v(" Plugin Build Files")]),e._v(" "),t("p",[e._v("The directories shown above show how the generated code is split into two parts:")]),e._v(" "),t("ul",[t("li",[e._v("the ThirdParty directory which contains files associated with the DLLs which the plugin wraps")]),e._v(" "),t("li",[e._v("the GeneratedExample module which contains module startup and shutdown code for the plugin")])]),e._v(" "),t("p",[e._v("The most important file is GeneratedExampleLibrary.Build.cs.  This contains (only the\nWindows content is shown):")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('using System.IO;\nusing UnrealBuildTool;\n\npublic class GeneratedExampleLibrary : ModuleRules\n{\n\tpublic GeneratedExampleLibrary(ReadOnlyTargetRules Target) : base(Target)\n\t{\n\t\tType = ModuleType.External;\n\n\t\tif (Target.Platform == UnrealTargetPlatform.Win64)\n\t\t{\n\t\t\t// Add the import library\n\t\t\tPublicAdditionalLibraries.Add(\n\t\t\t\tPath.Combine(ModuleDirectory, "x64", "Release", "ExampleLibrary.lib"));\n\n\t\t\t// Delay-load the DLL, so we can load it from the right place first\n\t\t\tPublicDelayLoadDLLs.Add("ExampleLibrary.dll");\n\n\t\t\t// Ensure that the DLL is staged along with the executable\n\t\t\tRuntimeDependencies.Add(\n\t\t\t\t"$(PluginDir)/Binaries/ThirdParty/GeneratedExampleLibrary/Win64/ExampleLibrary.dll");\n   \t\t }\n\t}\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("h3",{attrs:{id:"files-we-don-t-need"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#files-we-don-t-need"}},[e._v("#")]),e._v(" Files we don't need")]),e._v(" "),t("p",[e._v("The GeneratedExampleLibrary.Build.cs contains this line:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" Type = ModuleType.External;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("This indicates the ThirdParty module does not contain source which Unreal needs to build, it only contains\nthe DLLs - these are assumed to be built outside of Unreal and do not need to be compiled by Unreal.")]),e._v(" "),t("p",[e._v("But the plugin generator has added ExampleLibrary.cpp and ExampleLibrary.h.  These files "),t("em",[e._v("were")]),e._v(" used once\nto generate the ExampleLibrary.dll and ExampleLibrary.lib "),t("em",[e._v("when the project was created")]),e._v(".  But now ExampleLibrary.cpp\nis not used - if you change it nothing happens - ExampleLibrary.dll and ExampleLibrary.lib do not get rebuilt.")]),e._v(" "),t("p",[e._v("ExampleLibrary.h is used in the GeneratedExample module, where it runs a test\njust to show in the module startup code (in "),t("code",[e._v("FGeneratedExampleModule::StartupModule()")]),e._v(")\nthat the function "),t("code",[e._v("ExampleLibraryFunction()")]),e._v(" which is in the ExampleLibrary.dll can be called.")]),e._v(" "),t("p",[e._v("If we want to add our own DLLs to the project, using it as a starting point, we can delete")]),e._v(" "),t("ul",[t("li",[e._v("ExampleLibrary.h")]),e._v(" "),t("li",[e._v("ExampleLibrary.cpp")]),e._v(" "),t("li",[e._v("everything in "),t("code",[e._v("FGeneratedExampleModule::StartupModule()")])])]),e._v(" "),t("h2",{attrs:{id:"binary-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binary-files"}},[e._v("#")]),e._v(" Binary files")]),e._v(" "),t("p",[e._v("It is important to understand that the file Binaries/ThirdParty/GeneratedExampleLibrary/Win64/ExampleLibrary.dll was put in that directory by the plugin example creation code in the Unreal Editor when we created the plugin. It is not\nput there by the build process.  Although it is a copy of the file in ThirdParty\\GeneratedExampleCode\\x64\\Release the project as generated\ndoes not have a  mechanism to automatically copy it.  If we delete Binaries/ThirdParty/GeneratedExampleLibrary/Win64/ExampleLibrary.dll\nand rebuild the project, it does not get regenerated or copied.")]),e._v(" "),t("p",[e._v("These lines in the .Build.cs files suggest the ExampleLibrary.dll will be copied to the Binaries directory - but this is\nnot the case; a runtime dependency added in this way is only added if the file already exists under the Binaries directory:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// Ensure that the DLL is staged along with the executable\nRuntimeDependencies.Add(\n\t "$(PluginDir)/Binaries/ThirdParty/GeneratedExampleLibrary/Win64/ExampleLibrary.dll");\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("However you can copy a DLL to the Binaries directory from somewhere else like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('RuntimeDependencies.Add(\n      "$(PluginDir)/Binaries/ThirdParty/GeneratedExampleLibrary/Win64/ExampleLibrary.dll", \n      Path.Combine(ModuleDirectory, "x64", "Release", "ExampleLibrary.dll") );\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("If you do this the file will be copied when you build in the editor.  This will also\nput the DLL in the Binaries directory when you package the plugin.")]),e._v(" "),t("p",[e._v("If the DLLs you want to distribute in the plugin are installed elsewhere on your system you can reference them\nin a similar way.  These lines show how to add runtime dependencies for all the .dll files in the\ndirectory d:\\tools\\ffmpeg6\\installed\\bin:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('DirectoryInfo d = new DirectoryInfo(@"d:\\tools\\ffmpeg6\\installed\\bin"); \n\nFileInfo[] Files = d.GetFiles("*.dll");\nforeach (FileInfo file in Files)\n{\n\tstring FileName = Path.GetFileName(file.FullName);  \n\tRuntimeDependencies.Add(\n\t\t"$(PluginDir)/Binaries/ThirdParty/GeneratedExampleLibrary/Win64/" + FileName, \n\t\tfile.FullName);\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("When this code is compiled, or the plugin is packaged, all the .dll files in d:\\tools\\ffmpeg6\\installed\\bin\nwill be copied to the /Binaries/ThirdParty/GeneratedExampleLibrary/Win64/ directory.")]),e._v(" "),t("h2",{attrs:{id:"import-libraries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-libraries"}},[e._v("#")]),e._v(" Import Libraries")]),e._v(" "),t("p",[e._v("To add an .lib file to the project it needs to be added to the additional libraries collection\nwhich Unreal uses to generate its compile commands.  This is done by\nadding it to the PublicAdditionalLibraries collection in the GeneratedExampleLibrary.Build.cs like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('DirectoryInfo d = new DirectoryInfo(@"d:\\tools\\ffmpeg6\\installed\\bin"); \n\nFileInfo[] Libs = d.GetFiles("*.lib");\nforeach (FileInfo file in Libs)\n{\n\tPublicAdditionalLibraries.Add( file.FullName );\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("The above code makes all the .lib file in d:\\tools\\ffmpeg6\\installed\\bin available to\nthe project.")]),e._v(" "),t("p",[e._v("Its important to realise that Unreal does not use the project configuration\nof Visual Studio.  In Visual Studio you can configure project paths in the\nproject properties dialog:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/plugin_003.png",alt:""}})]),e._v(" "),t("p",[e._v("This has no effect! Unreal does not use the paths set here, it uses the paths set in the\n.Build.cs files to create its compile commands.")]),e._v(" "),t("h2",{attrs:{id:"delayed-loading-of-dlls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delayed-loading-of-dlls"}},[e._v("#")]),e._v(" Delayed Loading of DLLs")]),e._v(" "),t("p",[e._v("When a normal Windows process tries to load a .dll file it looks in places specified\nby the PATH environment variable. Unreal projects have their own idea of where a .dll might be, so that look in different\nplaces.")]),e._v(" "),t("p",[e._v("If a .dll cannot be found, we see a dialog box like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/plugin_004.png",alt:""}})]),e._v(" "),t("p",[e._v("And output like this in the Output window of Visual Studio:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("LogWindows: Failed to load 'D:/work/learn/PluginsGenerated/Plugins/GeneratedExample/Binaries/Win64/UnrealEditor-GeneratedExample.dll' (GetLastError=126)\nLogWindows:   Missing import: avformat-60.dll\nLogWindows:   Looked in: ../../../Engine/Binaries/Win64\nLogWindows:   Looked in: D:\\work\\learn\\PluginsGenerated\\Binaries\\Win64\nLogWindows:   Looked in: D:\\work\\learn\\PluginsGenerated\\Plugins\\GeneratedExample\\Binaries\\Win64\nLogWindows:   Looked in: C:\\Program Files\\Epic Games\\UE_5.1\\Engine\\Plugins\\Editor\\ModelingToolsEditorMode\\Binaries\\Win64\nand another ~150 similar lines\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("Unreal by default looks in the Binaries\\Win64 directory of every plugin, including:")]),e._v(" "),t("ul",[t("li",[e._v("D:\\work\\learn\\PluginsGenerated\\Binaries\\Win64")]),e._v(" "),t("li",[e._v("D:\\work\\learn\\PluginsGenerated\\Plugins\\GeneratedExample\\Binaries\\Win64")])]),e._v(" "),t("p",[e._v("but not the Binaries directory of the ThirdParty module of our project")]),e._v(" "),t("ul",[t("li",[e._v("D:\\work\\learn\\PluginsGenerated\\Plugins\\GeneratedExample\\Binaries\\ThirdParty\\GeneratedExampleLibrary\\Win64")])]),e._v(" "),t("p",[e._v("So we can either:")]),e._v(" "),t("ul",[t("li",[e._v("move the files to D:\\work\\learn\\PluginsGenerated\\Plugins\\GeneratedExample\\Binaries\\Win64 by changing the\n.Build.cs to:")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FileInfo[] Files = d.GetFiles("*.dll");\nforeach (FileInfo file in Files)\n{\n\tstring FileName = Path.GetFileName(file.FullName);\n\tRuntimeDependencies.Add( \n\t\t"$(PluginDir)/Binaries/Win64/" + FileName, \n\t\tfile.FullName);\n}\n\nFileInfo[] Libs = d.GetFiles("*.lib");\nforeach (FileInfo file in Libs)\n{\n\tPublicAdditionalLibraries.Add( file.FullName);\n\tRuntimeDependencies.Add(\n\t\t"$(PluginDir)/Binaries/Win64/" + FileName,\n\t\tfile.FullName);\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("ul",[t("li",[e._v("or leave the files where they are and configure them for delayed loading.")])]),e._v(" "),t("p",[e._v("To mark a .dll file for delayed load call "),t("code",[e._v("PublicDelayLoadDLLs.Add(DLLName)")]),e._v(" like so:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FileInfo[] Files = d.GetFiles("*.dll");\nforeach (FileInfo file in Files)\n{\n\tstring FileName = Path.GetFileName(file.FullName);\n\tRuntimeDependencies.Add( \n\t\t"$(PluginDir)/Binaries/ThirdParty/GeneratedExampleLibrary/Win64/" + FileName, \n\t\tfile.FullName);\n\tPublicDelayLoadDLLs.Add(file.Name);\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("p",[e._v("Note that the "),t("code",[e._v("PublicDelayLoadDLLs()")]),e._v(" call takes just the file name not the path.")]),e._v(" "),t("p",[e._v("Delayed loading means before Unreal attempts to call a method in a DLL it gives\nus a change to load the library ourselves using a call to\n"),t("code",[e._v("FPlatformProcess::GetDllHandle()")]),e._v(".")]),e._v(" "),t("p",[e._v("If our code calls "),t("code",[e._v("FPlatformProcess::GetDllHandle()")]),e._v(" to load a DLL\n"),t("em",[e._v("before any method from it is used")]),e._v(", we can load the DLL from any location and it will be used.")]),e._v(" "),t("p",[e._v("For example in the module startup of our plugin\n(in "),t("code",[e._v("FGeneratedExampleModule::StartupModule()")]),e._v(")\nwe could create a list of DLLs we want\nto load and load each one using a call to ```FPlatformProcess::GetDllHandle()``\nlike this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\tconst FString DLLs[] = {\n\t\t"avutil-58.dll",\n\t\t"swresample-4.dll",\n\t\t"libx264-164.dll",\n\t\t"avcodec-60.dll",\n\t\t"avformat-60.dll"\n\t};\n\n\tFString Dir = "d:\\\\tools\\\\ffmpeg6\\\\installed\\\\bin\\\\";\n\n\tfor (const FString& DLL : DLLs)\n\t{\n\t\tFString Where = Dir + DLL;\n\t\tvoid* Handle = FPlatformProcess::GetDllHandle(*Where);\n\t\tif (!Handle)\n\t\t{\n\t\t\tUE_LOG(LogTemp, Error, TEXT("Failed to open %s"), *Where);\n\t\t}\n\t}\n\n\tavformat_network_init();\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br")])]),t("p",[e._v("where "),t("code",[e._v("avformat_network_init()")]),e._v(" is the ffmpeg call we to load from the DLL.")]),e._v(" "),t("h2",{attrs:{id:"delayed-load-dll-ordering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delayed-load-dll-ordering"}},[e._v("#")]),e._v(" Delayed Load DLL Ordering")]),e._v(" "),t("p",[e._v("In the above example we have this list of DLLs to load using "),t("code",[e._v("FPlatformProcess::GetDllHandle()")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\tconst FString DLLs[] = {\n\t\t"avutil-58.dll",\n\t\t"swresample-4.dll",\n\t\t"libx264-164.dll",\n\t\t"avcodec-60.dll",\n\t\t"avformat-60.dll"\n\t};\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("The function we want to call is in avformat-60.dll, all the others are dependencies that avformat-60.dll\nneeds.")]),e._v(" "),t("p",[e._v("If we just try loading avcodec-60.dll first, we get log messages like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("LogWindows: Failed to load 'd:\\tools\\ffmpeg6\\installed\\bin\\avcodec-60.dll' (GetLastError=126)\nLogWindows:   Missing import: swresample-4.dll\nLogWindows:   Missing import: avutil-58.dll\nLogWindows:   Missing import: libx264-164.dll\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("telling us we need to load those dependencies first.")]),e._v(" "),t("h2",{attrs:{id:"building-a-plugin-from-the-command-line"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#building-a-plugin-from-the-command-line"}},[e._v("#")]),e._v(" Building a plugin from the command line")]),e._v(" "),t("p",[e._v("To speed up iteration you can package a plugin from the command line like this:")]),e._v(" "),t("blockquote",[t("p",[e._v('"C:/Program Files/Epic Games/UE_5.1/Engine/Build/BatchFiles/RunUAT.bat" BuildPlugin -Plugin="D:/work/learn/PluginsGenerated/Plugins/GeneratedExample/GeneratedExample.uplugin" -Package="D:/tmp/packaged/GeneratedExample/GeneratedExample" -CreateSubFolder" -nocompile -nocompileuat')])]),e._v(" "),t("h2",{attrs:{id:"troubleshooting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),t("p",[e._v("If a method is called inside a DLL which is delay loaded and that DLL has not been loaded\nyou get an exception like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/plugin_006.png",alt:""}})]),e._v(" "),t("p",[e._v("Looking at the call stack we can see the problem is in the delayLoadHelper2 code.")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/plugin_005.png",alt:""}})]),e._v(" "),t("p",[e._v("To see which DLL is causing the problem look at the local variables:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/plugin_005.png",alt:""}})]),e._v(" "),t("p",[e._v('From this we can see the dli->szDLL variable has the value "avformat-60.dll" so this is\nthe DLL which has not been loaded yet.')]),e._v(" "),t("h2",{attrs:{id:"other-plugin-features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-plugin-features"}},[e._v("#")]),e._v(" Other plugin features")]),e._v(" "),t("h4",{attrs:{id:"include-paths"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include-paths"}},[e._v("#")]),e._v(" Include Paths")]),e._v(" "),t("p",[e._v("If your plugin has include files you can add the directory which contains them to\nthe include path in the .Build.cs like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('string IncPath = Path.Combine(ModuleDirectory, "include");\nPublicSystemIncludePaths.Add(IncPath);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("h4",{attrs:{id:"alternative-names-for-debug-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#alternative-names-for-debug-files"}},[e._v("#")]),e._v(" Alternative names for debug files")]),e._v(" "),t("p",[e._v("It is not uncommon to have different file names for release and debug builds, for example\nto have the character 'd' appended to the debug file names.  In the .Build.cs file\nyou can do something like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('string LibName = "awesomename";\nif (Target.Configuration == UnrealTargetConfiguration.Debug\n\t && Target.bDebugBuildsActuallyUseDebugCRT)\n{\n\tLibName += "d";\n}\nPublicAdditionalLibraries.Add(Path.Combine(LibPath, LibName + ".lib"));\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("h4",{attrs:{id:"defining-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defining-variables"}},[e._v("#")]),e._v(" Defining variables")]),e._v(" "),t("p",[e._v("In the .Build.cs you can define variables which can the be used inside your C++ code:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PublicDefinitions.Add("WITH_EXTRA_STUFF=1");\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.unrealengine.com/5.1/en-US/integrating-third-party-libraries-into-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Epic Integrating third-party libraries into Unreal Engine"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=i.exports}}]);