(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{295:function(n,e,a){"use strict";a.r(e);var s=a(14),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",[n._v(n._s(this.$page.title))]),n._v(" "),a("p",[n._v("Updated for Unreal Engine 5.1.1")]),n._v(" "),a("p",[n._v("During the course of creating chaos vehicles from a python script I needed to\ncreate and add nodes to an animation graph.  In UE 5.1 animation graphs\ncan be created from python but there are no exposed functions for\nadding nodes to the graph.")]),n._v(" "),a("p",[n._v("The code to create an animation graph looks like this.")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('import unreal\n\nEAS: unreal.EditorAssetSubsystem = unreal.EditorAssetSubsystem()\nfactory: unreal.AnimBlueprintFactory = unreal.AnimBlueprintFactory()\n\ncar_asset_path: str = "/Game/Meshes/SM_Car"\n\n# get the skeleton of the car\nloaded = EAS.load_asset( asset_path=car_asset_path )\nif loaded == None:\n    raise Exception(f"Could not load newly created asset {car_asset_path}") \n    \nassert isinstance( loaded, unreal.SkeletalMesh )\nskm: unreal.SkeletalMesh = loaded\n\nfactory.set_editor_property(name="target_skeleton", value=skm.skeleton )\nfactory.set_editor_property(name="parent_class", value=unreal.VehicleAnimationInstance )\n        \nasset = asset_tools.create_asset(\n    asset_name="APB_Car", \n    package_path="/Game/Meshes", \n    asset_class=unreal.AnimBlueprint, \n    factory=factory ) \n\nassert isinstance( asset, unreal.AnimBlueprint )\nanim_bp: unreal.AnimBlueprint = asset\ngraphs: unreal.Array[unreal.AnimationGraph] = anim_bp.get_animation_graphs()\nassert( len(graphs) == 1 )\ngraph: unreal.AnimationGraph = graphs[0]\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br")])]),a("p",[n._v('This uses an existing vehicle skeletal mesh "/Game/Blueprints/SM_Car" which has a reference\nto an existing skeletal mesh.  The code above loads that skeletal mesh and uses it\nwhen constructing the animation graph.')]),n._v(" "),a("p",[n._v("The code above retrieves the animation graph from the animation blueprint.  This\nis a far as we can go in python without exposing more graph manipulation functions\nto python.")]),n._v(" "),a("h2",{attrs:{id:"what-we-want-to-be-able-to-do"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-we-want-to-be-able-to-do"}},[n._v("#")]),n._v(" What we want to be able to do")]),n._v(" "),a("p",[n._v('There is an existing UE module called "ControlRigDeveloper" which allows you to\nmanipulate a control rig using python like so:')]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("rig = unreal.load_object(name = '/Game/ControlRig/Samples/Mannequin_ControlRig', outer = None)\n\n# access to the controller to perform changes\ncontroller = rig.get_controller()\n\n# get the unit - you might also get this by path or similar\nunit = unreal.RigUnit_MathFloatAdd.static_struct()\n \n# add a couple of nodes to the graph provided the unit struct, the method (is always Execute)\nnode1 = controller.add_unit_node(script_struct = unit, method_name = \"Execute\")\n# this one also sets the 2D position in the graph\nnode2 = controller.add_unit_node(script_struct = unit, method_name = \"Execute\", position = unreal.Vector2D(50, 100))\n \n# find the pins\npin1 = node1.find_pin('result')\npin2 = node2.find_pin('a')\n \n# create the link\nsuccess = controller.add_link(pin1.get_pin_path(), pin2.get_pin_path())\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("This pretty much shows what we want to be able to do with an animation graph")]),n._v(" "),a("ol",[a("li",[n._v("add nodes to the graph")]),n._v(" "),a("li",[n._v("connect these nodes using specified pins")])]),n._v(" "),a("h2",{attrs:{id:"approach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#approach"}},[n._v("#")]),n._v(" Approach")]),n._v(" "),a("p",[n._v("The functionality to add nodes to an anim graph and connect them will be:")]),n._v(" "),a("ul",[a("li",[n._v("implemented in a c++ class which extends UBlueprintFunctionLibrary")]),n._v(" "),a("li",[n._v("using UFUNCTION macros so the functions can be called from python")])])])}),[],!1,null,null,null);e.default=t.exports}}]);