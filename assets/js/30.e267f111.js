(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{312:function(e,t,s){"use strict";s.r(t);var n=s(14),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",[e._v(e._s(this.$page.title))]),e._v(" "),s("p",[e._v("Updated for Unreal Engine 5.1.1")]),e._v(" "),s("h2",{attrs:{id:"using-c-20"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-c-20"}},[e._v("#")]),e._v(" Using C++20")]),e._v(" "),s("p",[e._v("These code here is developed and tested using Visual Studio 2022 setup as described "),s("RouterLink",{attrs:{to:"/content/BuildFromSource.html"}},[e._v("here")])],1),e._v(" "),s("h2",{attrs:{id:"project-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#project-configuration"}},[e._v("#")]),e._v(" Project Configuration")]),e._v(" "),s("p",[e._v("As at April 2023 Unreal Engine is configured to use c++17 by default.")]),e._v(" "),s("p",[e._v("To configure a project to use c++20 add this line to the Project.build.cs")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("CppStandard = CppStandardVersion.Cpp20;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"subobjects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subobjects"}},[e._v("#")]),e._v(" Subobjects")]),e._v(" "),s("p",[e._v("The USubobjectDataSubsystem class has methods for finding the\ncomponents which make up a blueprint. We will use this as a example.  The stages of getting from a blueprint\nto a specific component (whether by type or name) are:")]),e._v(" "),s("ul",[s("li",[e._v("the USubobjectDataSubsystem gives us a list of FSubobjectDataHandle data handles")]),e._v(" "),s("li",[e._v("from the FSubobjectDataHandle data handles we can get a list of FSubobjectData data items")]),e._v(" "),s("li",[e._v("from the FSubobjectData data items we can get a list of UObject pointers (each of which is a component)")]),e._v(" "),s("li",[e._v("then we can filter the UObject pointers to get the type we want")])]),e._v(" "),s("p",[e._v("The process of getting from the list of FSubobjectDataHandle data handles to\na smaller list of components looks like this in python, using nested list comprehensions:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('components = \n    [ comp for comp in \n\t\t[ library.get_object(subobject) for subobject in \n\t\t\t[ subsystem.k2_find_subobject_data_from_handle(handle) for handle in \n\t\t\t\t\tsubsystem.k2_gather_subobject_data_for_blueprint(context=blueprint) ] \n\t\t\t]\n\t\tif comp.get_class().get_name() == "MyActorComponent"\n\t]\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h2",{attrs:{id:"ranges"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ranges"}},[e._v("#")]),e._v(" Ranges")]),e._v(" "),s("p",[e._v("To do the same thing in c++ as the python code above does we will use the\nstd::ranges classes, new in c++20.")]),e._v(" "),s("p",[e._v("Having included the "),s("code",[e._v("<ranges>")]),e._v(" header file we can write this like so:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('UBlueprint* CarBlueprint = Cast<UBlueprint>( UEditorAssetLibrary::LoadAsset\n            ("/Game/VehicleTemplate/Blueprints/SportsCar/SportsCar_Pawn"));\n\nTArray< FSubobjectDataHandle > SubobjectDataHandles;\n\n// get the subobject data handles into an unreal TArray\nSubobjectDataSubsystem->K2_GatherSubobjectDataForBlueprint(CarBlueprint, SubobjectDataHandles);\n\n// copy from the TArray to a std::vector\nstd::vector< FSubobjectDataHandle > Handles(SubobjectDataHandles.Num());\nfor (int j = 0; j < SubobjectDataHandles.Num(); ++j)\n{\n    Handles[j] = SubobjectDataHandles[j];\n}\n\n// create a range of USkeletalMeshComponent* from the vector of handles\n\nauto range = Handles\n    | std::views::transform([&SubobjectDataSubsystem](const FSubobjectDataHandle& Handle) {\n        // handles to FSubobjectData\n        FSubobjectData Data;\n        SubobjectDataSubsystem->K2_FindSubobjectDataFromHandle(Handle, Data);\n        return Data;\n    })\n    | std::views::transform([](const FSubobjectData& Data) {\n        // FSubobjectData to UObject*\n        return USubobjectDataBlueprintFunctionLibrary::GetObject(Data);\n    })\n    | std::views::filter([](const UObject* Object) {\n        // just return the skeletal mesh components\n        return ( Cast< const USkeletalMeshComponent >(Object) != nullptr );\n    })\n    | std::views::transform([](const UObject* Object) {\n        // UObject* to USkeletalMeshComponent*&\n        return Cast< const USkeletalMeshComponent >(Object);\n    });\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br")])]),s("p",[e._v("Each stage of the process is either a call to "),s("code",[e._v("std::views::transform")]),e._v(" which transforms an item\nin the list from one type to another, or a call to "),s("code",[e._v("std::views::filter")]),e._v(" which removes\nitems from the list if they do not match the selection criteria.")]),e._v(" "),s("p",[e._v("The result of the code above is  the objects "),s("code",[e._v("range")]),e._v(" on which we can\nuse in a loop to iterate over all the USkeletalMeshComponent like so:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for (const USkeletalMeshComponent* SkelMesh : range)\n{\n    CompareSkeletalMeshComponents( SkelMesh, OtherSkelMesh );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h2",{attrs:{id:"structured-bindings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#structured-bindings"}},[e._v("#")]),e._v(" Structured Bindings")]),e._v(" "),s("p",[e._v("Given a C++ type such as FVector which has members X, Y, Z, structured bindings allows us to\ndeconstruct an FVector variable into three separate values like this:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("FVector Vector(1.0f,2.0f,3.0f);\nauto [x, v, z] = Vector;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("We need to write come code to make the structured binding work.  Looking at "),s("a",{attrs:{href:"https://en.cppreference.com/w/cpp/language/structured_binding",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://en.cppreference.com/w/cpp/language/structured_binding"),s("OutboundLink")],1),e._v(' we are using "Case 2: binding a tuple-like type", so\nwe need to:')]),e._v(" "),s("ul",[s("li",[e._v("implement "),s("code",[e._v("std::tuple_size<>")]),e._v(" to tell the compiler how many variables an FVector will be deconstructed to")]),e._v(" "),s("li",[e._v("implement "),s("code",[e._v("std::tuple_element<>")]),e._v(" to tell the compiler the type of each element of the FVector")]),e._v(" "),s("li",[e._v("implement "),s("code",[e._v("get<>()")]),e._v(" to tell the compiler how to get each element from the FVector")])]),e._v(" "),s("p",[e._v("The FVector will be deconstructed into 3 separate varibales, so we implement "),s("code",[e._v("std::tuple_size<>")]),e._v(" to tell the compiler how many variables a FVector will be deconstructed to like this:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("namespace std\n{\n\ttemplate<>\n\tstruct tuple_size<FVector> \n\t{\n\t\tstatic constexpr int value = 3;\n\t};\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("We  implement "),s("code",[e._v("std::tuple_element<>")]),e._v(" to tell the compiler the type of element\nof the FVector like this:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("namespace std \n{\n\ttemplate<size_t Index>\n\tstruct tuple_element<Index, FVector>\n\t{\n\t\tusing type = FVector::FReal;\n\t};\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("We  implement "),s("code",[e._v("get<>()")]),e._v(" which is called for index values from 0 to std::tuple_size (i.e. 3).\nNote that the "),s("code",[e._v("get<>()")]),e._v(" function does not need to be in the std namespace.  The compiler using\nargument-dependent lookup; it looks for the "),s("code",[e._v("get<>()")]),e._v(" function in the namespace\nwhich the FVector is in. FVector is declared like this:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("using FVector = UE::Math::TVector<double>;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("so the compiler looks for the "),s("code",[e._v("get<>()")]),e._v(" function in the UE::Math namespace, so we put it there:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("namespace UE::Math\n{\n    template<size_t Index>\n    constexpr auto get(const FVector& Vector)\n    {\n    if constexpr (Index == 0) return Vector.X;\n    if constexpr (Index == 1) return Vector.Y;\n    if constexpr (Index == 2) return Vector.Z;\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("Once we have the above code we can use structured binding to deconstruct an FVector variable\nlike this:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("void Test()\n{\n\tFVector Vector(1.0f, 2.0f, 3.0f);\n\tauto [x, y, z] = Vector;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://devblogs.microsoft.com/cppblog/documentation-for-cpp20-ranges/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Microsoft Ranges"),s("OutboundLink")],1),s("br"),e._v(" "),s("a",{attrs:{href:"https://timur.audio/how-to-make-a-container-from-a-c20-range",target:"_blank",rel:"noopener noreferrer"}},[e._v("Making a Container from a C++20 Range"),s("OutboundLink")],1),s("br"),e._v(" "),s("a",{attrs:{href:"https://www.cppstories.com/2021/filter-cpp-containers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Filtering Containers"),s("OutboundLink")],1),s("br"),e._v(" "),s("a",{attrs:{href:"https://en.cppreference.com/w/cpp/language/structured_binding",target:"_blank",rel:"noopener noreferrer"}},[e._v("Structured Biddings"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);