(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{315:function(t,a,e){"use strict";e.r(a);var s=e(14),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",[t._v(t._s(this.$page.title))]),t._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v("A delegate is a object which can be used to call:")]),t._v(" "),a("ul",[a("li",[t._v("a specific method on a specific object")]),t._v(" "),a("li",[t._v("a static function")])]),t._v(" "),a("p",[t._v("A delegate type is declared like this:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_DELEGATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" DelegateType "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("This creates the delegate type (not the actual delegate) and that type is then used to create the delegate like so:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("DelegateType TheDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("There are many macros like "),a("code",[t._v("DECLARE_DELEGATE")]),t._v(" and "),a("code",[t._v("DECLARE_DELEGATE_OneParam")]),t._v(" used to create different types of delegates with\ndifferent parameters.  See the references at the end of this page for more details.")]),t._v(" "),a("h3",{attrs:{id:"delegate-parameters-and-payload-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delegate-parameters-and-payload-data"}},[t._v("#")]),t._v(" Delegate parameters and payload data")]),t._v(" "),a("p",[a("em",[t._v("There is a difference between the number of parameters the bound method takes and the number\nof parameters which are passed when invoking the delegate")])]),t._v(" "),a("p",[t._v("The delegate declaration macros such as "),a("code",[t._v("DECLARE_DELEGATE_OneParam")]),t._v(", "),a("code",[t._v("DECLARE_DELEGATE_TwoParams")]),t._v(" etc.\nrefer to the number and type of parameters "),a("em",[t._v("passed when invoking the delegate")]),t._v(", not\nthe number of parameters the bound method actually takes.")]),t._v(" "),a("p",[t._v("For example we can define a method which takes two parameters and\nthen say we want the delegate to be invoked with only one parameter, like so:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FExample")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" F1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" F2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_DELEGATE_OneParam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" DelegateType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nDelegateType TheDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTSharedRef Example "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeShared")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTheDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindSP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTheDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteIfBound")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("While the delegate is invoked with one parameter the method will actually\nbe called with two parameters: the one passed to the "),a("code",[t._v("ExecuteIfBound()")]),t._v(" function\nand the one passed to the "),a("code",[t._v("BindSP()")]),t._v(" function.  The parameters passed to the "),a("code",[t._v("BindSP()")]),t._v(" method\nare refered to as "),a("em",[t._v("payload")]),t._v(" parameters:")]),t._v(" "),a("ul",[a("li",[t._v("payload parameters are passed to the bound method "),a("em",[t._v("after")]),t._v(" the parameters from "),a("code",[t._v("ExecuteIfBound()")])]),t._v(" "),a("li",[t._v("payload parameters are specified when the delegate is bound, not when it is invoked, so\nthey are like values captured by a lambda in that they are carried around by the delegate")])]),t._v(" "),a("h3",{attrs:{id:"binding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binding"}},[t._v("#")]),t._v(" Binding")]),t._v(" "),a("p",[t._v("When an delegate is created it is "),a("em",[t._v("unbound")]),t._v(", that is to say it does not refer to any method.")]),t._v(" "),a("p",[t._v("Once it has been created it can be bound to a specific function or a method on a specific object.  The bind call might:")]),t._v(" "),a("ul",[a("li",[t._v("pass the address of a global function (BindStatic)")]),t._v(" "),a("li",[t._v("pass a raw c++ pointer to the specific object (BindRaw)")]),t._v(" "),a("li",[t._v("pass a lambda (BindLambda)")]),t._v(" "),a("li",[t._v("create a weak reference to the specific object (BindSP, BindUObject)")])]),t._v(" "),a("p",[t._v("Typically a delegate is created, then bound, and then invoked at a later time, by calling\n"),a("code",[t._v("Execute()")]),t._v(" or "),a("code",[t._v("ExecuteIfBound()")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("invoking a delegate which references a static function will always work")]),t._v(" "),a("li",[t._v("invoking a delegate which references a raw c++ pointer can crash the program if the object\nthat the delegate references has been deleted between the time the delegate was bound and when\nit was invoked")]),t._v(" "),a("li",[t._v("invoking a delegate which uses a weak pointer will not crash if referenced object\nhas been deleted, it just won't do anything")])]),t._v(" "),a("h3",{attrs:{id:"type-conversion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-conversion"}},[t._v("#")]),t._v(" Type conversion")]),t._v(" "),a("p",[t._v("The parameters passed to the bind functions must match the types\nuse by the bound method exactly.  For example this code will fail\nto compile:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FExample")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" F1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" F2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_DELEGATE_OneParam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" DelegateType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nDelegateType TheDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTSharedRef Example "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeShared")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTheDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindSP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("and results in some hard to decipher error messages:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("error C2665"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 'TDelegate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FDefaultDelegateUserPolicy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("BindSP"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" none of the "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" overloads could convert all the argument types\nnote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" could be '"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" TDelegate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FDefaultDelegateUserPolicy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindSP")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" TSharedRef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__cdecl FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("'\nnote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v("       '"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" TDelegate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FDefaultDelegateUserPolicy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindSP")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" TSharedRef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__cdecl FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("'\nnote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" '"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" TDelegate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FDefaultDelegateUserPolicy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindSP")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" TSharedRef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__cdecl FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" cannot convert argument "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" from '"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__cdecl FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("' to '")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__cdecl FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("'\nnote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Types pointed to are unrelated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" conversion "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("requires")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reinterpret_cast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("style cast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" parenthesized function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("style cast\nnote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" see declaration of 'TDelegate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("FDefaultDelegateUserPolicy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("BindSP"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("'")]),t._v("\nnote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" trying to match the argument list '"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TSharedRef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ESPMode"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("ThreadSafe"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__cdecl FExample"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("'\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("all because the value 2.0 passed to the "),a("code",[t._v("BindSP()")]),t._v(" method is a double whereas the bound method takes a float. The\nusual implicit type conversion which allows a C++ function which takes a double to be called with a float does not\nhappen when calling a delegate.  Changing the double to a float (i.e 2.0 to 2.0f) will fix this.")]),t._v(" "),a("h3",{attrs:{id:"dynamic-delegates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-delegates"}},[t._v("#")]),t._v(" Dynamic Delegates")]),t._v(" "),a("p",[t._v("Dynamic delegates bind to a specific object by its address but bind the method to be\ncalled by the name of that method instead of the address.  These are not used\nmuch in Lyra but are used in the engine to bind\ninputs, for example to bind a particular keystroke to a\nnamed method on the input component like so:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("FInputAxisKeyBinding "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AxisKey "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nAB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bConsumeInput "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bConsumeInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nAB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bExecuteWhenPaused "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bExecuteWhenPaused"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nAB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AxisDelegate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindDelegate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ObjectToBindTo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FunctionNameToBind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("Dynamic delegates are slower than normal delegates because when the delegate is invoked it must interact\nwith the reflection system to find the method by its name. They are also serializable so when they\nare used in a blueprint they get save with that blueprint.")]),t._v(" "),a("h3",{attrs:{id:"multi-cast-delegates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multi-cast-delegates"}},[t._v("#")]),t._v(" Multi-cast delegates")]),t._v(" "),a("p",[t._v("A normal delegate can have only one function bound to it at a time.  A multi-cast delegate can have more than one function bound to it,\nso when the delegate is invoked all the functions bound to it are called, one after the other.")]),t._v(" "),a("p",[t._v("The delegate type is declared using some variation of "),a("code",[t._v("DECLARE_MULTICAST_DELEGATE")]),t._v(".")]),t._v(" "),a("p",[t._v('Individual functions are bound one at a time\nusing methods which start with "Add", like this:')]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_MULTICAST_DELEGATE_TwoParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FCommonSession_FindSessionsFinished"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" bSucceeded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FText"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ErrorMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nFCommonSession_FindSessionsFinished OnSearchFinished"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuickPlayRequest"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("OnSearchFinished"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("UCommonSessionSubsystem"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("HandleQuickPlaySearchFinished"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    JoiningOrHostingPlayerPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" HostRequestPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nOnSearchFinished"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Broadcast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bSucceeded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ErrorMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("Similarly to binding a normal delegate, there exist variations to bind\ndifferent type of functions:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("AddSP()")]),t._v(" binds member function and retains a weak pointer to the containing object")]),t._v(" "),a("li",[a("code",[t._v("AddThreadSafeSP()")]),t._v(" binds member function and retains a weak pointer to the containing object")]),t._v(" "),a("li",[a("code",[t._v("AddUObject()")]),t._v(" binds a member function and retains a raw pointer to the containing object")])]),t._v(" "),a("p",[t._v("Instead of calling "),a("code",[t._v("Delegate.ExecuteIfBound()")]),t._v(" you call "),a("code",[t._v("Delegate.Broadcast()")]),t._v(" to\ninvoke all the functions bound to the delegate.  The bound functions\nare called in the reverse order in which they were added.")]),t._v(" "),a("h3",{attrs:{id:"delegates-and-blueprints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delegates-and-blueprints"}},[t._v("#")]),t._v(" Delegates and Blueprints")]),t._v(" "),a("p",[t._v("Given a delegate type declared like this:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" FDelegateType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("in a class header file we can declare a variable of that type and make it accessible from blueprints like so:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UPROPERTY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BlueprintAssignable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Category"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Example Delegates"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nFDelegateType OnSomethingInterestingHappening"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Note that the declaration is somewhat different to other definitons:")]),t._v(" "),a("ul",[a("li",[t._v("it must be a dynamic multicast delegate")]),t._v(" "),a("li",[t._v('the variable names must be listed in the delegate not just the types; in the above C++ code\nthe delegate parameter is called "value" and is of type float.')]),t._v(" "),a("li",[t._v("the name of the delegate type must start with 'F'")])]),t._v(" "),a("p",[t._v("If we add these lines to LyraCharacter.h")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" FDelegateType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UPROPERTY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BlueprintAssignable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Category"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Example Delegates"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nFDelegateType OnSomethingInterestingHappening"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v('then we can edit the blueprint /Game/Characters/Character_Default, click on the "Character_Default" top level component\nand see the new delegate in the list of possible events:')]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/lyra_03_001.png",alt:""}})]),t._v(" "),a("p",[t._v("We can click the '+' button to have Unreal add an event node to the event graph, including the float parameter called \"value\":")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/lyra_03_003.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"binding-delegates-in-constructors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binding-delegates-in-constructors"}},[t._v("#")]),t._v(" Binding Delegates in Constructors")]),t._v(" "),a("p",[t._v("Don't do this.  If you bind delegates in the constructor they become part of the class default\nobject and, at least historically, have cause problems when interacting with blueprints.  Bind them in\n"),a("code",[t._v("BeginPlay()")]),t._v(" instead.")]),t._v(" "),a("h4",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/delegates-and-lamba-functions-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic Delegates"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);