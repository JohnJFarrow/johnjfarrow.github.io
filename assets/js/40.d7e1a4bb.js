(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{325:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",[t._v(t._s(this.$page.title))]),t._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v("The aim of this is to examine the source code from the Lyra example provided by Epic Games\nand to try and identify and document practices and approaches for using c++.")]),t._v(" "),a("p",[t._v("Here we look at use of Gameplay Tags and the Gameplay Ability System (GAS), and\ntry and trace the use of gameplay tags from pressing a button\nto getting a response in the UI and in gameplay.")]),t._v(" "),a("h2",{attrs:{id:"about-gameplay-tags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about-gameplay-tags"}},[t._v("#")]),t._v(" About Gameplay Tags")]),t._v(" "),a("p",[t._v('A Gameplay Tag is a string-like object with a number of parts\ndelimited by "." characters, such as "Event.Movement.Dash".  All of GAS\ndepends on these tags. Gameplay tags can be created in different ways including\nusing the Unreal Editor, loading from data tables, loading from .ini files, and using C++.')]),t._v(" "),a("p",[t._v("For more information on how tags are\ncreated see "),a("RouterLink",{attrs:{to:"/content/LyraGASGameplayTags.html"}},[t._v("Gameplay Tags")]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"stages-in-how-lyra-uses-the-gameplay-ability-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stages-in-how-lyra-uses-the-gameplay-ability-system"}},[t._v("#")]),t._v(" Stages in how Lyra uses the Gameplay Ability System")]),t._v(" "),a("p",[t._v("These are the major steps which happen when Lyra receives input from the user\nto when the consequences of that input are displayed.")]),t._v(" "),a("h3",{attrs:{id:"step-1-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-1-input"}},[t._v("#")]),t._v(" Step 1: Input")]),t._v(" "),a("p",[t._v("User enters input")]),t._v(" "),a("h3",{attrs:{id:"step-2-from-input-to-input-action-using-input-mapping-context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-2-from-input-to-input-action-using-input-mapping-context"}},[t._v("#")]),t._v(" Step 2: From Input to Input Action using Input Mapping Context")]),t._v(" "),a("p",[t._v("Input is matched to an Input Mapping Context.   An Input Mapping Context is\nlike a table matching hardware inputs to Input Action objects.")]),t._v(" "),a("p",[t._v("Input Mapping Contexts are used by Lyra to assign a set of actions (for example\nmatching a game mode such as deathmatch) or an individual action (matching an individual weapon)\ndynamically as game modes are selected and items are equipped and discarded.")]),t._v(" "),a("p",[t._v("In addition to matching an hardware input, an Input Mapping Context can modify input processing, for example by altering joystick sensitivity.")]),t._v(" "),a("p",[t._v("For more information on how tags are\ncreated and used see "),a("RouterLink",{attrs:{to:"/content/LyraGASInputMappingContexts.html"}},[t._v("Input Mapping Contexts")]),t._v(".")],1),t._v(" "),a("h3",{attrs:{id:"step-3-from-input-action-to-gameplay-tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-3-from-input-action-to-gameplay-tag"}},[t._v("#")]),t._v(" Step 3: From Input Action to Gameplay Tag")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("ULyraPawnData")]),t._v(" class is used to define a Lyra pawn.   The pawn contains mappings from an Input Action to either:")]),t._v(" "),a("ul",[a("li",[t._v("a gameplay tag, which will lead us to a gameplay ability")]),t._v(" "),a("li",[t._v("a native action, which is a function which is executed directly without using a gameplay ability.")])]),t._v(" "),a("p",[t._v("The pawn class has a reference to a "),a("code",[t._v("ULyraInputConfig")]),t._v(" like so:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/lyra_02_009.png",alt:""}})]),t._v(" "),a("p",[t._v("This is used to load configuration data which populates the pawns action mappings.")]),t._v(" "),a("p",[t._v("For more information on how input actions are\nmapped to native actions and gameplay abilities see "),a("RouterLink",{attrs:{to:"/content/LyraGASActionMappings.html"}},[t._v("Pawn Action Mappings")]),t._v(".")],1),t._v(" "),a("h3",{attrs:{id:"step-4-from-gameplay-tag-to-gameplay-ability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-4-from-gameplay-tag-to-gameplay-ability"}},[t._v("#")]),t._v(" Step 4: From Gameplay Tag to Gameplay Ability")]),t._v(" "),a("p",[t._v('Gameplay abilities are assigned to player character (an other pawns) when they become available due to the game mode, game phase, or equipped items. The gameplay abilities which are assigned\nto a character are referred to by Lyra as "activatable" abilities.')]),t._v(" "),a("p",[t._v("The LyraAbilitySystemComponent, which is used as a component of both the part of the player character and the player state, maintains a list of activatable gameplay abilities.  Each gameplay ability in the list is associated with one gameplay tag.  This pairing of a gameplay ability and a gameplay tag is held in a FGameplayAbilitySpec structure.")]),t._v(" "),a("p",[t._v("The LyraAbilitySystemComponent has a list of these FGameplayAbilitySpec objects\n(in the member "),a("code",[t._v("ActivatableAbilities")]),t._v("), and once a user action is translated to a gameplay tag, this list is searched for items which match that gameplay tag.")]),t._v(" "),a("p",[t._v("Here is an example of  the asset which associates the GA_Hero_Jump ability with the InputTag.Jump gameplay tag:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/lyra_02_013.png",alt:""}})]),t._v(" "),a("p",[t._v("For more information about "),a("code",[t._v("LyraAbilitySystemComponent")]),t._v(" and "),a("code",[t._v("FGameplayAbilitySpec")]),t._v("\nsee "),a("RouterLink",{attrs:{to:"/content/LyraGASActivatableAbilities.html"}},[t._v("Activatable Abilities")])],1),t._v(" "),a("h3",{attrs:{id:"step-5-queueing-a-gameplay-ability-for-activation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-5-queueing-a-gameplay-ability-for-activation"}},[t._v("#")]),t._v(" Step 5: Queueing a Gameplay Ability for Activation")]),t._v(" "),a("p",[t._v("When an action is initiated by the user and the "),a("code",[t._v("LyraHeroComponent::Input_AbilityInputTagPressed()")]),t._v(" method is called, this forwards the call to the "),a("code",[t._v("ULyraAbilitySystemComponent")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraHeroComponent")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Input_AbilityInputTagPressed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FGameplayTag InputTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" APawn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Pawn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetPawn")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("APawn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraPawnExtensionComponent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PawnExtComp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraPawnExtensionComponent")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindPawnExtensionComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pawn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ULyraAbilitySystemComponent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LyraASC "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PawnExtComp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLyraAbilitySystemComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tLyraASC"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AbilityInputTagPressed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("The "),a("code",[t._v("LyraAbilitySystemComponent")]),t._v(" component (which is part of the player class) holds a list of "),a("code",[t._v("FGameplayAbilitySpec")]),t._v(" objects each of which holds (in addition to other things) a pointer to a "),a("code",[t._v("UGameplayAbility")]),t._v(" object and a collection of one or more gameplay tags.  These are the available abilities configured when the pawn was created.  Each "),a("code",[t._v("FGameplayAbilitySpec")]),t._v(" has a unique handle.")]),t._v(" "),a("p",[t._v("The code in "),a("code",[t._v("ULyraAbilitySystemComponent::AbilityInputTagPressed()")]),t._v(" scans that list\nand if it finds a "),a("code",[t._v("FGameplayAbilitySpec")]),t._v(" with a the required gameplay tag it adds the handle of the "),a("code",[t._v("FGameplayAbilitySpec")]),t._v(" to two collections of handles called "),a("code",[t._v("InputPressedSpecHandles")]),t._v(" and "),a("code",[t._v("InputHeldSpecHandles")]),t._v(".  It does not execute the ability, it just\nupdates the list of handles of abilities which are currently executing.")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraAbilitySystemComponent")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AbilityInputTagPressed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayTag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" InputTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsValid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayAbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AbilitySpec "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ActivatableAbilities"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Ability "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DynamicAbilityTags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasTagExact")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tInputPressedSpecHandles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUnique")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tInputHeldSpecHandles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUnique")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h4",{attrs:{id:"input-step-4-activating-a-queued-gameplay-ability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input-step-4-activating-a-queued-gameplay-ability"}},[t._v("#")]),t._v(" Input Step 4: Activating a Queued Gameplay Ability")]),t._v(" "),a("p",[t._v("What happens next is that the game executes the tick function for the player controller and\nthese functions are called:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("APlayerController::TickActor()")]),t._v(" calls")]),t._v(" "),a("li",[a("code",[t._v("ALyraPlayerController::PlayerTick()")]),t._v(" eventually calls")]),t._v(" "),a("li",[a("code",[t._v("ULyraAbilitySystemComponent::ProcessAbilityInput()")])])]),t._v(" "),a("p",[t._v("This iterates through all the "),a("code",[t._v("FGameplayAbilitySpec")]),t._v(" handles added since last tick (i.e. added in step 3 above) and collects them\ninto the "),a("code",[t._v("AbilitiesToActivate")]),t._v(" collection:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayAbilitySpecHandle"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" SpecHandle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" InputPressedSpecHandles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FGameplayAbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" AbilitySpec "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindAbilitySpecFromHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SpecHandle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Ability"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tAbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("InputPressed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsActive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ability is active so pass along the input event.")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AbilitySpecInputPressed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraGameplayAbility"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LyraAbilityCDO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CastChecked")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ULyraGameplayAbility"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Ability"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LyraAbilityCDO"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetActivationPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ELyraAbilityActivationPolicy"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("OnInputTriggered"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\tAbilitiesToActivate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUnique")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("p",[t._v("Immediately after that the abilities are activated:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayAbilitySpecHandle"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AbilitySpecHandle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AbilitiesToActivate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TryActivateAbility")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpecHandle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/gameplay-tags-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: Gameplay Tags"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/using-gameplay-abilities-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: Using Gas"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/gameplay-attributes-and-gameplay-effects-for-the-gameplay-ability-system-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: GAS Attributes and Effects"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/BlueprintAPI/Ability/Async/WaitGameplayEventtoActor/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: GAS"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://dev.epicgames.com/community/learning/tutorials/aqrD/unreal-engine-enhanced-input-binding-with-gameplay-tags-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: Games Input"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"move"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#move"}},[t._v("#")]),t._v(" MOVE")]),t._v(" "),a("p",[t._v("Lyra's design supports multiple game\nmodes (such as the Arena and ShooterGame) and different phases within each game mode (such as\nwarmup, play, post-game).  This adds some complexity to Lyra's use of the Gameplay Ability System.")]),t._v(" "),a("p",[t._v("This intent here is that gameplay abilities, gameplay effects, and gameplay attributes are grouped into sets, and that these\nsets can be associated with different game modes, different phases of the game, and\ndifferent items of equipment.  A player might gain a specific ability (i.e. have a gameplay ability become\navailable to his Actor object) by stepping into a room\nor picking up weapon, and lose that ability once he leaves the room or\nputs down the weapon.")]),t._v(" "),a("h3",{attrs:{id:"using-gameplay-tags-as-an-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-gameplay-tags-as-an-interface"}},[t._v("#")]),t._v(" Using Gameplay Tags as an interface")]),t._v(" "),a("p",[t._v('A gameplay tags is a string like "Player.Weapon.Shotgun".  Lyra uses gameplay tags to separate parts of the game.  When the user does an input action such as pressing a key this executes a series of steps eventually producing a single gameplay tag which is used')]),t._v(" "),a("h3",{attrs:{id:"extension"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extension"}},[t._v("#")]),t._v(' "Extension"')]),t._v(" "),a("p",[t._v('Lyra labels the concept of separating the player pawn object from the player state (which holds the\navailable gameplay abilities) "Extension".  The player pawn object is extended by the LyraPawnExtensionComponent\ncomponent.')]),t._v(" "),a("details",{attrs:{closed:""}},[a("summary",[t._v("Show more details...")]),t._v("\nAn example of  this is forwarding a request for the ability system component from the Lyra character\nto its pawn extension component:\n"),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("UAbilitySystemComponent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ALyraCharacter")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetAbilitySystemComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" PawnExtComponent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLyraAbilitySystemComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);