(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{305:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",[t._v(t._s(this.$page.title))]),t._v(" "),s("h2",{attrs:{id:"introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("The aim of this is to examine the source code from the Lyra example provided by Epic Games\nand to try and identify and document practices and approaches for using c++.")]),t._v(" "),s("p",[t._v("Here we look at use of Gameplay Tags and the Gameplay Ability System (GAS), and\ntry and trace the use of gameplay tags from pressing a button\nto getting a response in the UI and in gameplay.")]),t._v(" "),s("h3",{attrs:{id:"overview-of-how-lyra-uses-the-gameplay-ability-system"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview-of-how-lyra-uses-the-gameplay-ability-system"}},[t._v("#")]),t._v(" Overview of How Lyra uses the Gameplay Ability System")]),t._v(" "),s("p",[t._v("Lyra's design supports multiple game\nmodes (such as the Arena and ShooterGame) and different phases within each game mode (such as\nwarmup, play, post-game).  This adds some complexity to Lyra's use of the Gameplay Ability System.")]),t._v(" "),s("p",[t._v("This intent here is that gameplay abilities, gameplay effects, and gameplay attributes are grouped into sets, and that these\nsets can be associated with different game modes, different phases of the game, and\ndifferent items of equipment.  A player might gain a specific ability (i.e. have a gameplay ability become\navailable to his Actor object) by stepping into a room\nor picking up weapon, and lose that ability once he leaves the room or\nputs down the weapon.")]),t._v(" "),s("p",[t._v("This approach adds complexity because the gameplay abilities cannot just be added to the classes of player and non-player\ncharacters; they must be created and maintained separately so that they can be dynamically added and removed as game modes,\nlocations and equipped items changes, and dynamically applied to pawns as they spawn and are deleted.")]),t._v(" "),s("p",[t._v("In Lyra gameplay abilities have a lifespan which is longer than the player pawn object.\nThe gameplay abilities are owned (via the LyraAbilitySystemComponent)\nby the LyraPlayerState object.  This has a longer lifespan than the pawn object and is used to\nhold gameplay abilities and apply them to the player pawn object whenever the player pawn object respawns.")]),t._v(" "),s("p",[t._v("When the play pawn does not exist (e.g. the play might just have died, or the game might not have started)\nthe gameplay abilities are owned by the player state like so:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_020.png",alt:""}})]),t._v(" "),s("p",[t._v("Once the player pawn is created, the player state and the player pawn share a reference\nto the same LyraAbilitySystemComponent like so:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_021.png",alt:""}})]),t._v(" "),s("p",[t._v("In the Lyra source code there is support for the player pawn object owning\nits own abilities (see the "),s("code",[t._v("ALyraCharacterWithAbilities")]),t._v(" class) but this is not used.")]),t._v(" "),s("p",[t._v("This grouping of abilities, effects and attributes requires additional code outside the normal\nGAS, but does have benefits:")]),t._v(" "),s("ul",[s("li",[t._v("it makes it easier to add new game modes with new abilities using a plugins architecture")]),t._v(" "),s("li",[t._v("separate game modes can be worked on by different developers at the same time")]),t._v(" "),s("li",[t._v("only the subset of abilities, effects, and attributes relevant to the current game mode or\nphase or location need to be in memory; so the game uses less memory and loads faster")]),t._v(" "),s("li",[t._v("game abilities do not reference and are not referenced by input actions so they are not loaded\ninto memory when not required")])]),t._v(" "),s("h3",{attrs:{id:"extension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extension"}},[t._v("#")]),t._v(' "Extension"')]),t._v(" "),s("p",[t._v('Lyra labels the concept of separating the player pawn object from the player state (which holds the\navailable gameplay abilities) "Extension".  The player pawn object is extended by the LyraPawnExtensionComponent\ncomponent.')]),t._v(" "),s("p",[t._v("An example of  this is forwarding a request for the ability system component from the Lyra character\nto its pawn extension component:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("UAbilitySystemComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ALyraCharacter")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetAbilitySystemComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" PawnExtComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLyraAbilitySystemComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"about-gameplay-tags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#about-gameplay-tags"}},[t._v("#")]),t._v(" About Gameplay Tags")]),t._v(" "),s("p",[t._v('Gameplay tags are strings like "Player.Weapon.Shotgun" represented by a '),s("code",[t._v("FGameplayTag")]),t._v(" type:")]),t._v(" "),s("ul",[s("li",[t._v('they are a hierarchy of any number of parts separated by "."')]),t._v(" "),s("li",[s("code",[t._v("FGameplayTag")]),t._v(" has support for comparison and matching against individual tags and collections of tags")]),t._v(" "),s("li",[t._v("gameplay tags are stored in the collection class "),s("code",[t._v("FGameplayTagContainer")]),t._v(" which has support for searching, matching and filtering tags")]),t._v(" "),s("li",[t._v('higher parts of the hierarchy implicitly exist - meaning if you create a tag such as "Player.Weapon.Shotgun"\nthen the tags "Player.Weapon" and "Player" are also created')]),t._v(" "),s("li",[t._v("all tags exist in one game-specific global dictionary.  This facilitates mapping them to\nnumeric types for fast comparison.")])]),t._v(" "),s("p",[t._v("Gameplay tags can be created by:")]),t._v(" "),s("ul",[s("li",[t._v('creating and editing .ini files in the "GameplayTags" folder.')]),t._v(" "),s("li",[t._v("manually adding or removing them in the Project Settings menu (which will add them to the chosen .ini file)")]),t._v(" "),s("li",[t._v("building Data Table Assets")]),t._v(" "),s("li",[t._v("adding them from c++ by calling "),s("code",[t._v("UGameplayTagsManager::Get().AddNativeGameplayTag()")]),t._v('.  The code comments for this say\n"This can only be called during engine initialization, the table needs to be locked down before replication"')])]),t._v(" "),s("p",[t._v("One important thing to note is that gameplay tags exist as a global pool accessible everywhere in the project.")]),t._v(" "),s("h4",{attrs:{id:"viewing-tags-in-project-settings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#viewing-tags-in-project-settings"}},[t._v("#")]),t._v(" Viewing Tags in Project Settings:")]),t._v(" "),s("p",[t._v("The project settings window shows all the tags in the project, including tags read from .ini files,\ntags read from data tables (likes the DT_AnimEffectTags shown), and tags created in c++:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_012.png",alt:""}})]),t._v(" "),s("p",[t._v("If you mouse over a tag in the project settings you can\nsee its source:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_005.png",alt:""}})]),t._v(" "),s("p",[t._v("By clicking the drop-down arrow next to a gameplay tag you can see where it is used:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_015.png",alt:""}})]),t._v(" "),s("p",[t._v('Ticking the "Show Native Packages" checkbox will show if there are references from c++ code, but not the actual code.')]),t._v(" "),s("h4",{attrs:{id:"tags-from-c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tags-from-c"}},[t._v("#")]),t._v(" Tags from c++")]),t._v(" "),s("p",[t._v("Lyra adds about 30 gameplay tags in the "),s("code",[t._v("FLyraGameplayTags::AddAllTags()")]),t._v(" method like so:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ability_ActivateFail_IsDead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ability.ActivateFail.IsDead"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ability failed to activate because its owner is dead."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ability_ActivateFail_Cooldown"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ability.ActivateFail.Cooldown"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ability failed to activate because it is on cool down."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ability_ActivateFail_Cost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ability.ActivateFail.Cost"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ability failed to activate because it did not pass the cost checks."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h4",{attrs:{id:"tags-from-ini-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tags-from-ini-files"}},[t._v("#")]),t._v(" Tags from .ini files")]),t._v(" "),s("p",[t._v("The .ini files listed here create gameplay tags like this:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('[/Script/GameplayTags.GameplayTagsList]\nGameplayTagList=(Tag="Ability.ActivateFail.MagazineFull",DevComment="")\nGameplayTagList=(Tag="Ability.ActivateFail.NoSpareAmmo",DevComment="")\nGameplayTagList=(Tag="Event.Movement.ADS",DevComment="")\nGameplayTagList=(Tag="Event.Movement.Dash",DevComment="")\n...\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("These .ini files are used by Lyra.")]),t._v(" "),s("ul",[s("li",[t._v("Plugins\\Gamesubtitles\\Config\\Tags\\PluginTags.ini -- 2 gameplay tags")]),t._v(" "),s("li",[t._v("Plugins\\GameFeatures\\TopDownArena\\Config\\Tags\\TopDownArenaTags.ini -- 8 gameplay tags")]),t._v(" "),s("li",[t._v("Plugins\\GameFeatures\\ShooterCore\\Config\\Tags\\ShooterCoreTags.ini -- 60 gameplay tags")])]),t._v(" "),s("h4",{attrs:{id:"tags-from-data-tables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tags-from-data-tables"}},[t._v("#")]),t._v(" Tags from Data Tables")]),t._v(" "),s("p",[t._v('In the project settings the property "Gameplay Tag Table List" is a list of data tables\nsuch as /Game/ContextEffects/DT_AnimEffectTags and /Game/ContextEffects/DT_SurfaceTypes.  These\nare data tables with the GameplayTagTableRow type and have this structure:')]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_006.png",alt:""}})]),t._v(" "),s("p",[t._v('Gameplay tag data tables can be maintained or generated by tools outside of Unreal.  For example\na file "fishing.csv" which has these contents:')]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("RowName,Tag\nStartToFish,AnimEffect.Fish.Start\nFinishFishing,AnimEffect.Fish.End\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("can be imported into Unreal to create gameplay tags by clicking the Import button in the content browser.  When the file changes\nthe Reimport button in the data table editor can be used to update Unreal with the changes.")]),t._v(" "),s("h3",{attrs:{id:"fgameplayabilityspec-and-activatable-abilities"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fgameplayabilityspec-and-activatable-abilities"}},[t._v("#")]),t._v(" FGameplayAbilitySpec and Activatable Abilities")]),t._v(" "),s("p",[t._v("As described in the overview above gameplay abilities are assigned to player character (and other characters)\nwhen they become available due to the game mode, game phase, or equipped items.  The\nLyraAbilitySystemComponent, which is used as a component of both the part of the player character\nand the player state, maintains a list\nof available gameplay abilities.  Each gameplay ability in the list is associated\nwith one gameplay tag.  This pairing of a gameplay ability and a gameplay tag is held in a\nFGameplayAbilitySpec structure.  The LyraAbilitySystemComponent has a list of these FGameplayAbilitySpec objects\n(in the member "),s("code",[t._v("ActivatableAbilities")]),t._v("), and\nonce a user action is translated to a gameplay tag, this list is searched for items\nwhich match that gameplay tag.")]),t._v(" "),s("h3",{attrs:{id:"associating-gameplay-tags-with-gameplay-abilities"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#associating-gameplay-tags-with-gameplay-abilities"}},[t._v("#")]),t._v(" Associating Gameplay Tags with Gameplay Abilities")]),t._v(" "),s("p",[t._v("In order to trigger a gameplay ability when a specific gameplay tag comes from the input system it\nis necessary to pair each gameplay ability with a gameplay tag.\nThese data table assets are used to do this:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_010.png",alt:""}})]),t._v(" "),s("p",[t._v("Looking at one of these (AbilitySet_ShooterHero), we can see it is a list of abilities and associated input tags.  This is one of the sources of the activatable activities list:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_011.png",alt:""}})]),t._v(" "),s("p",[t._v("The HeroData_ShooterGame asset is a data table based on the LyraPawnData structure.  It holds data for\neach type of character, specifically the HeroData_ShooterGame table has a reference to the AbilitySet_ShooterHero\nset of abilities, so when the ShooterGame mode is running the Lyra pawn will gave the\nabilities listed in the HeroData_ShooterGame table:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_012.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"loading-activatable-activities-into-the-game-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loading-activatable-activities-into-the-game-state"}},[t._v("#")]),t._v(" Loading activatable activities into the game state")]),t._v(" "),s("p",[t._v("When an experience finishes loading\n"),s("code",[t._v("ULyraExperienceManagerComponent::OnExperienceLoadComplete()")]),t._v(" is called, which calls\n"),s("code",[t._v("ALyraPlayerState::OnExperienceLoaded()")]),t._v(" and this calls "),s("code",[t._v("ALyraPlayerState::SetPawnData()")]),t._v("\nto copy the abilities to the LyraAbilitySystemComponent of the LyraPlayerState.")]),t._v(" "),s("p",[t._v("Each time  the Lyra pawn is spawned these abilities will be made available to the pawn\nby setting the LyraAbilitySystemComponent of the Lyra pawn to the LyraAbilitySystemComponent\nstored in the player state.")]),t._v(" "),s("h3",{attrs:{id:"how-lyra-uses-gameplay-tags-for-input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-lyra-uses-gameplay-tags-for-input"}},[t._v("#")]),t._v(" How Lyra Uses Gameplay Tags for Input")]),t._v(" "),s("h4",{attrs:{id:"input-step-1-from-hardware-inputs-to-input-actions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-step-1-from-hardware-inputs-to-input-actions"}},[t._v("#")]),t._v(" Input Step 1: From Hardware Inputs to Input Actions")]),t._v(" "),s("p",[t._v("Input comes from hardware devices, for example when the user presses a key or uses a gamepad.")]),t._v(" "),s("p",[t._v("An "),s("em",[t._v("Input Mapping Context")]),t._v(" is used to map this keystroke, mouse movements etc. from\nthe hardware input to an "),s("em",[t._v("Input Action")]),t._v(".  There are several Input Mapping Contexts\nwhich are used either for different physical devices, such as IMC_ShooterGame_Gamepad and IMC_ShooterGame_KBM, or\nfor different game modes such as IMC_Default_Gamepad and IMC_ShooterGame_Gamepad:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_001.png",alt:""}})]),t._v(" "),s("p",[t._v("Each Input Mapping Context maps a hardware input to an action, for example in the IMC_Default_KMB pressing\nthe left shift key triggers the IA_Ability_Dash input action:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_002.png",alt:""}})]),t._v(" "),s("p",[t._v("More than one Input Mapping Context can be in use at one time, for example the IMC_Default_KBM has actions for player\nmovement and looking, and the IMC_ShooterGame_KMB adds actions for checking the scoreboard\nor using additional special attacks. These additional actions from IMC_ShooterGame_KMB are only in effect when the current\ngame mode is the ShooterGame; Unreal dynamically applies IMCs as the game mode changes.")]),t._v(" "),s("p",[t._v("IMCs can be used dynamically to make small changes to gameplay.  For example in the gameplay ability named GA_ADS (ADS = Aim Down Sights) we see\nthe IMC_ADS_Speed context being added to the player when the gameplay ability starts and\nremoved when the gameplay ability ends:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_003.png",alt:""}})]),t._v(" "),s("p",[t._v("This is the IMC_ADS_Speed input mapping context:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_004.png",alt:""}})]),t._v(" "),s("p",[t._v("What it does is change the sensitivity of inputs when the user is looking down the sights to make the play move more slowly. It demonstrates:")]),t._v(" "),s("ul",[s("li",[t._v("how modifiers can be added to the a hardware input before it is forwarded to the input action")]),t._v(" "),s("li",[t._v("the use of custom modifiers such as Lyra Aim Inversion Setting")])]),t._v(" "),s("p",[t._v("The Lyra Aim Inversion Setting is a simple c++ class with one function:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Applies an inversion of axis values based on a setting in the Lyra Shared game settings */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UCLASS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NotBlueprintable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MinimalAPI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" meta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DisplayName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lyra Aim Inversion Setting"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraInputModifierAimInversion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UInputModifier")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GENERATED_BODY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" FInputActionValue "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ModifyRaw_Implementation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UEnhancedPlayerInput"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PlayerInput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FInputActionValue CurrentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" DeltaTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tULyraLocalPlayer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LocalPlayer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LyraInputModifiersHelpers")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLocalPlayer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PlayerInput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("LocalPlayer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" CurrentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t\tULyraSettingsShared"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Settings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LocalPlayer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSharedSettings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ensure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Settings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\tFVector NewValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CurrentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FVector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Settings"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInvertVerticalAxis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tNewValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Settings"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInvertHorizontalAxis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tNewValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" NewValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br")])]),s("h4",{attrs:{id:"input-step-2-from-input-actions-to-gameplay-tags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-step-2-from-input-actions-to-gameplay-tags"}},[t._v("#")]),t._v(" Input Step 2: From Input Actions to Gameplay Tags")]),t._v(" "),s("p",[t._v("Lyra contains a LyraInputConfig structure which holds a list of LyraInputAction items each of which\nlinks an gameplay tag with an Input Action:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("USTRUCT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BlueprintType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FLyraInputAction")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GENERATED_BODY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UPROPERTY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EditDefaultsOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" InputAction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UPROPERTY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EditDefaultsOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Meta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Categories "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"InputTag"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tFGameplayTag InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UCLASS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BlueprintType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Const"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraInputConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UDataAsset")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GENERATED_BODY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ULyraInputConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FObjectInitializer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ObjectInitializer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindNativeInputActionForTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayTag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" bLogNotFound "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindAbilityInputActionForTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayTag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" bLogNotFound "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// List of input actions used by the owner.  These input actions are mapped to a gameplay tag and must be manually bound.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UPROPERTY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EditDefaultsOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BlueprintReadOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Meta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TitleProperty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"InputAction"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tTArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FLyraInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" NativeInputActions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// List of input actions used by the owner.  These input actions are mapped to a gameplay tag and are automatically")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bound to abilities with matching input tags.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UPROPERTY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EditDefaultsOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BlueprintReadOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Meta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TitleProperty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"InputAction"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tTArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FLyraInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" AbilityInputActions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("p",[t._v("A single "),s("code",[t._v("ULyraInputConfig")]),t._v(" contains two lists of Input Action -> Gameplay Tag pairs.  Each pair\nmaps one input action to one gameplay tag.")]),t._v(" "),s("p",[t._v("There are 5 instances of the "),s("code",[t._v("ULyraInputConfig")]),t._v(" used in Lyra:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_007.png",alt:""}})]),t._v(" "),s("p",[t._v("Continuing with the dash action, we can look at the InputData_Hero data asset and see that the Input Action IA_Ability_Dash\nis mapped to the InputTag.Ability.Dash gameplay tag:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_008.png",alt:""}})]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("ULyraPawnData")]),t._v(" class is used to define a Lyra pawn.  This class has a reference to a "),s("code",[t._v("ULyraInputConfig")]),t._v("\nlike so:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/lyra_02_009.png",alt:""}})]),t._v(" "),s("p",[t._v("There are 5 LyraPawnData assets each of which uses corresponding LyraInputConfig.  This does not mean there is a one-to-one\ncorrespondence - a pawn of class "),s("code",[t._v("ULyraHeroComponent")]),t._v(" can call "),s("code",[t._v("AddAdditionalInputConfig()")]),t._v(" to add\nadditional input config objects.")]),t._v(" "),s("p",[t._v("The LyraInputConfig object is used in "),s("code",[t._v("ULyraHeroComponent::InitializePlayerInput()")]),t._v(".  This includes the code\nbelow:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraPawnExtensionComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PawnExtComp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraPawnExtensionComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindPawnExtensionComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pawn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraPawnData"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PawnData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PawnExtComp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetPawnData")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ULyraPawnData"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraInputConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" InputConfig "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PawnData"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FLyraGameplayTags"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" GameplayTags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FLyraGameplayTags")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register any default input configs with the settings so that they will be applied to the ")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// player during AddInputMappings")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FMappableConfigPair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Pair "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DefaultInputConfigs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FMappableConfigPair")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ActivatePair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pair"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\t\n\t\t\tULyraInputComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LyraIC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CastChecked")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ULyraInputComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PlayerInputComponent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInputMappings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Subsystem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ULyraSettingsLocal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LocalSettings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraSettingsLocal")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tLocalSettings"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("OnInputConfigActivated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ULyraHeroComponent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("OnInputConfigActivated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tLocalSettings"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("OnInputConfigDeactivated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ULyraHeroComponent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("OnInputConfigDeactivated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t\tTArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("uint32"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BindHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindAbilityActions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_AbilityInputTagPressed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_AbilityInputTagReleased"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*out*/")]),t._v(" BindHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindNativeAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GameplayTags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag_Move"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\tETriggerEvent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Triggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_Move"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*bLogIfNotFound=*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindNativeAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GameplayTags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag_Look_Mouse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\tETriggerEvent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Triggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_LookMouse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*bLogIfNotFound=*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindNativeAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GameplayTags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag_Look_Stick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\tETriggerEvent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Triggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_LookStick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*bLogIfNotFound=*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindNativeAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GameplayTags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag_Crouch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\tETriggerEvent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Triggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_Crouch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*bLogIfNotFound=*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindNativeAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GameplayTags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag_AutoRun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\tETriggerEvent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Triggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_AutoRun"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*bLogIfNotFound=*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("p",[t._v("This introduces the distinction between native actions, which are implemented in c++ methods, and\nability actions which are implemented as gameplay ability objects.  So we can see\nfrom the above code that the some actions are implemented natively and some are not.")]),t._v(" "),s("p",[t._v("One odd part is the call to "),s("code",[t._v("LyraIC->AddInputMappings(InputConfig, Subsystem)")]),t._v("\nwhich would seem to be intended to add mappings from the InputConfig to the ULyraInputComponent LyraIC,\nbut in fact the code in "),s("code",[t._v("ULyraInputComponent::AddInputMappings()")]),t._v(" does not use the InputConfig\nthat is passed in.")]),t._v(" "),s("p",[t._v("The code in "),s("code",[t._v("ULyraHeroComponent::AddAdditionalInputConfig()")]),t._v(" actually starts the binding of ability actions.\nAn abbreviated version is shown here:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraHeroComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddAdditionalInputConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraInputConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tTArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("uint32"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BindHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" APawn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Pawn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetPawn")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("APawn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tULyraInputComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LyraIC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pawn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindComponentByClass")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ULyraInputComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" APlayerController"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetController")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("APlayerController"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULocalPlayer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLocalPlayer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tUEnhancedInputLocalPlayerSubsystem"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Subsystem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSubsystem")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("UEnhancedInputLocalPlayerSubsystem"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraPawnExtensionComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PawnExtComp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraPawnExtensionComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindPawnExtensionComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pawn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tLyraIC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindAbilityActions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_AbilityInputTagPressed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ThisClass"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Input_AbilityInputTagReleased"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*out*/")]),t._v(" BindHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[s("code",[t._v("ULyraHeroComponent::AddAdditionalInputConfig()")]),t._v(" then calls "),s("code",[t._v("LyraIC->BindAbilityActions()")]),t._v("\nwhich binds the input actions to delegates:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PressedFuncType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReleasedFuncType")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraInputComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindAbilityActions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraInputConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UserClass"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                             PressedFuncType PressedFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\t\t\t ReleasedFuncType ReleasedFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\t\t\t TArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("uint32"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" BindHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FLyraInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Action "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" InputConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("AbilityInputActions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputAction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" Action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PressedFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tBindHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ETriggerEvent"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("Triggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t\t\t\t\t\t\t\t\t\t   PressedFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetHandle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FuncType")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraInputComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindNativeAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraInputConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayTag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                                           ETriggerEvent TriggerEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UserClass"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FuncType Func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" bLogIfNotFound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UInputAction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" IA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InputConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindNativeInputActionForTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bLogIfNotFound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BindAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TriggerEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br")])]),s("p",[t._v("The line")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("BindHandles.Add(BindAction(Action.InputAction, ETriggerEvent::Triggered, Object, PressedFunc, Action.InputTag).GetHandle());\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("creates a transient (i.e. it only exists for the life of the function call) BindAction object which binds the action:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("template< class FuncType, class UserClass, typename... VarTypes >\nFEnhancedInputActionEventBinding& BindAction(const UInputAction* Action, \n\t\t\t\t\t\t\t\t\t\t\t ETriggerEvent TriggerEvent, \n\t\t\t\t\t\t\t\t\t\t\t UserClass* Object, \n\t\t\t\t\t\t\t\t\t\t\t FuncType Func, \n\t\t\t\t\t\t\t\t\t\t\t VarTypes... Vars)\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("When this is called for the dash action, the parameters look like this:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Name")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Action")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("IA_Ability_Dash")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TriggerEvent")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ETriggerEvent::Triggered")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Object")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Lyra_Hero i.e. the player object, a LyraPawnComponent")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("PressedFunc")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("LyraHeroComponent::Input_AbilityInputTagPressed")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Action.InputTag")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('"InputTag.Ability.Dash"')])])])]),t._v(" "),s("h4",{attrs:{id:"input-step-3-from-gameplay-tags-to-queueing-a-gameplay-ability-for-activation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-step-3-from-gameplay-tags-to-queueing-a-gameplay-ability-for-activation"}},[t._v("#")]),t._v(" Input Step 3: From Gameplay Tags to Queueing a Gameplay Ability for Activation")]),t._v(" "),s("p",[t._v("When the dash action is initiated by the user and the "),s("code",[t._v("LyraHeroComponent::Input_AbilityInputTagPressed()")]),t._v(" method is called, what it does is\nforward the call to the "),s("code",[t._v("ULyraAbilitySystemComponent")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraHeroComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Input_AbilityInputTagPressed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FGameplayTag InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" APawn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Pawn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetPawn")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("APawn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraPawnExtensionComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PawnExtComp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraPawnExtensionComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindPawnExtensionComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pawn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ULyraAbilitySystemComponent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LyraASC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PawnExtComp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetLyraAbilitySystemComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tLyraASC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AbilityInputTagPressed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("The LyraAbilitySystemComponent component which is part of the player class holds a list of "),s("code",[t._v("FGameplayAbilitySpec")]),t._v("\nobjects each of which holds (in addition to other things) a pointer to a "),s("code",[t._v("UGameplayAbility")]),t._v(" object\nand a collection of one or more gameplay tags.  These are the available abilities\nconfigured when the pawn was created.")]),t._v(" "),s("p",[t._v("The code in "),s("code",[t._v("ULyraAbilitySystemComponent::AbilityInputTagPressed()")]),t._v(" scans that list\nand if it finds a "),s("code",[t._v("FGameplayAbilitySpec")]),t._v(" with a matching gameplay tag to the one associated\nwith the Input Action (such as IA_Ability_Dash) it adds the handle of the "),s("code",[t._v("FGameplayAbilitySpec")]),t._v(" to two collections\nof handles InputPressedSpecHandles and InputHeldSpecHandles.  It does not execute the ability, it just\nupdates the list of handles of abilities which are currently executing.")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ULyraAbilitySystemComponent")]),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AbilityInputTagPressed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayTag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayAbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AbilitySpec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ActivatableAbilities"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Ability "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DynamicAbilityTags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasTagExact")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("InputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tInputPressedSpecHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUnique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tInputHeldSpecHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUnique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h4",{attrs:{id:"input-step-4-activating-a-queued-gameplay-ability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-step-4-activating-a-queued-gameplay-ability"}},[t._v("#")]),t._v(" Input Step 4: Activating a Queued Gameplay Ability")]),t._v(" "),s("p",[t._v("What happens next is that the game executes the tick function for the player controller and\nthese functions are called:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("APlayerController::TickActor()")]),t._v(" calls")]),t._v(" "),s("li",[s("code",[t._v("ALyraPlayerController::PlayerTick()")]),t._v(" eventually calls")]),t._v(" "),s("li",[s("code",[t._v("ULyraAbilitySystemComponent::ProcessAbilityInput()")])])]),t._v(" "),s("p",[t._v("This iterates through all the "),s("code",[t._v("FGameplayAbilitySpec")]),t._v(" handles added since last tick (i.e. added in step 3 above) and collects them\ninto the "),s("code",[t._v("AbilitiesToActivate")]),t._v(" collection:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayAbilitySpecHandle"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" SpecHandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" InputPressedSpecHandles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FGameplayAbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" AbilitySpec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindAbilitySpecFromHandle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SpecHandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Ability"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tAbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("InputPressed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsActive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ability is active so pass along the input event.")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AbilitySpecInputPressed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ULyraGameplayAbility"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" LyraAbilityCDO "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CastChecked")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ULyraGameplayAbility"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Ability"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LyraAbilityCDO"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetActivationPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ELyraAbilityActivationPolicy"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("OnInputTriggered"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\tAbilitiesToActivate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddUnique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Handle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br")])]),s("p",[t._v("Immediately after that the abilities are activated:")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FGameplayAbilitySpecHandle"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AbilitySpecHandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" AbilitiesToActivate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TryActivateAbility")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbilitySpecHandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/gameplay-tags-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: Gameplay Tags"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/using-gameplay-abilities-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: Using Gas"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/gameplay-attributes-and-gameplay-effects-for-the-gameplay-ability-system-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: GAS Attributes and Effects"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://docs.unrealengine.com/5.0/en-US/BlueprintAPI/Ability/Async/WaitGameplayEventtoActor/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: GAS"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://dev.epicgames.com/community/learning/tutorials/aqrD/unreal-engine-enhanced-input-binding-with-gameplay-tags-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epic: Games Input"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);